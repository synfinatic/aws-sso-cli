{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>AWS SSO CLI is a secure replacement for using the aws configure sso wizard with a focus on security and ease of use for organizations with many AWS Accounts and/or users with many IAM Roles to assume. It shares a lot in common with aws-vault, but is more focused on the AWS SSO use case instead of static API credentials.</p> <p>AWS SSO CLI requires your AWS account(s) to be setup with AWS IAM Identity Center, which was previously known as AWS Single Sign-On.  If your organization is using the older SAML integration (typically you will have multiple tiles in OneLogin/Okta) then this won't work for you.</p>"},{"location":"#what-does-aws-sso-cli-do","title":"What does AWS SSO CLI do?","text":""},{"location":"#overview","title":"Overview","text":"<p>AWS SSO CLI makes it easy to manage your shell environment variables allowing you to access the AWS API &amp; web console using CLI tools.  Unlike the official AWS tooling, the <code>aws-sso</code> command does not require manually creating named profiles in your <code>~/.aws/config</code> (or anywhere else for that matter) for each and every role you wish to assume and use.</p> <p><code>aws-sso</code> focuses on making it easy to select a role via CLI arguments or via an interactive auto-complete experience with automatic and user-defined metadata (tags) and exports the necessary AWS STS Token credentials to your shell environment in a variety of ways.  It even supports sharing credentials via the AWS ECS Task IAM Role.</p> <p>As part of the goal of improving the end-user experience with AWS SSO, it also supports using multiple AWS Web Console sessions and many other quality of life improvements!</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Enhanced security over stock AWS tooling</li> <li>Auto-discover your AWS SSO roles and manage      your <code>~/.aws/config</code> file</li> <li>Support selecting an IAM role via <code>$AWS_PROFILE</code>, CLI (with auto-completion)     or interactive search</li> <li>Ability to select roles based on user-defined     and auto-discovered tags</li> <li>Support for multiple active AWS Console sessions</li> <li>Guided setup to help you configure <code>aws-sso</code> the first time you run</li> <li>Advanced configuration available to adjust colors     and generate named profiles via templates</li> <li>Easily see how much longer your STS credentials are valid for</li> <li>Written in GoLang, so only need to install a single binary (no dependencies)</li> <li>Supports Linux, MacOS, and Windows</li> </ul>"},{"location":"#security","title":"Security","text":"<p>Unlike the official AWS cli tooling, all authentication tokens and credentials used for accessing AWS and your SSO provider are encrypted on disk using your choice of secure storage solution. All encryption is handled by the 99designs/keyring library which is also used by aws-vault.</p> <p>Credentials encrypted by <code>aws-sso</code> and not via the standard AWS CLI tool:</p> <ul> <li>AWS SSO ClientID/ClientSecret -- <code>~/.aws/sso/cache/botocore-client-id-&lt;region&gt;.json</code></li> <li>AWS SSO AccessToken -- <code>~/.aws/sso/cache/&lt;random&gt;.json</code></li> <li>AWS Profile Access Credentials -- <code>~/.aws/cli/cache/&lt;random&gt;.json</code></li> </ul> <p>As you can see, not only does the standard AWS CLI tool expose the temporary AWS access credentials to your IAM roles, but more importantly the SSO AccessToken which can be used to fetch IAM credentials for any role you have been granted access!</p>"},{"location":"#what-is-not-encrypted","title":"What is not encrypted?","text":"<ul> <li>Contents of user defined <code>~/.aws-sso/config.yaml</code></li> <li>Metadata associated with the AWS Roles fetched via AWS SSO in <code>~/.aws-sso/cache.json</code><ul> <li>Email address tied to the account (root user)</li> <li>AWS Account Alias</li> <li>AWS Role ARN</li> </ul> </li> </ul>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#general-usage","title":"General Usage","text":""},{"location":"FAQ/#when-will-my-credentials-expire","title":"When will my credentials expire?","text":"<p>Your credentials will expire based on how long your administrator allows. To see how long your credentials have until they expire, see the list command.</p>"},{"location":"FAQ/#can-aws-sso-auto-refresh-my-iam-role-credentials","title":"Can aws-sso auto-refresh my IAM role credentials?","text":"<p>If your AWS administrator configured the IAM role session timeout to a short duration (default is 1hr), then <code>aws-sso</code> will need to reguarly fetch new IAM credentials when they expire.  Sadly, there is no good way to automatically update your shell environment variables with the new values every time they expire.</p> <p>However, if you use aws-sso setup profiles and then set your <code>AWS_PROFILE</code> environment variable to the name of the profile you'd like to use, then <code>aws-sso</code> can auto-refresh your credentials in the background for as long as your AWS Identity Center session is valid (default is 8hrs).</p>"},{"location":"FAQ/#why-cant-aws-sso-find-my-new-role","title":"Why can't aws-sso find my new role?","text":"<p>Most likely, this is because the aws-sso cache is out of date.  You can force a refresh of the cache by running aws-sso cache.</p> <p>Note, if you have just been assigned a new PermissionSet in IAM Identity Center, it tends to show up in the IAM Identity Center web console (<code>https://xxxxx.awsapps.com/start</code>) before it is made available to <code>aws-sso</code> via the ListAccountRoles API call.  Unfortunately, this seems to be a limitation with AWS and you just have to wait a few minutes.</p> <p>You can see what the AWS ListAccountRoles API is returning via <code>aws-sso cache -L debug</code></p>"},{"location":"FAQ/#why-does-aws-sso-say-i-need-to-login-now","title":"Why does aws-sso say I need to login now?","text":"<p>As of v2.x, <code>aws-sso</code> now expects you to explicitly login via the <code>login</code> command as training users to expect to be auto-prompted via the browser made it more likely an attacker could successfully phish their credentials.  By requiring logging in to be explictly initiated by the user, it becomes easier to identify when browser prompts are legitimately for <code>aws-sso</code>.</p> <p>Users wishing to utilize the previous auto-login mechanisim can use then AutoLogin configuration option.</p>"},{"location":"FAQ/#advanced-features","title":"Advanced Features","text":""},{"location":"FAQ/#does-aws-sso-cli-support-role-chaining","title":"Does AWS SSO CLI support role chaining?","text":"<p>Yes.  You can use <code>aws-sso</code> to assume roles in other AWS accounts or roles that are not managed via AWS SSO Permission Sets using role chaining.</p> <p>For more information on this, see the Via configuration option.</p> <p>You can also use the standard aws config definition:</p> <pre><code>[profile RoleToAssumeViaRoleChaining]\nrole_arn = arn:aws:iam::2373474565:role/SomeRoleToAsssume\nsource_profile = NameOfAwsSsoCliProfile\n</code></pre> <p>And generate the necessary AWS SSO CLI profile entries via aws-sso config-profiles command.</p>"},{"location":"FAQ/#how-does-aws-sso-cli-manage-the-aws_default_region","title":"How does AWS SSO CLI manage the $AWS_DEFAULT_REGION?","text":"<p>AWS SSO will leave the <code>$AWS_DEFAULT_REGION</code> environment variable alone unless the following are all true:</p> <ul> <li>The <code>$AWS_DEFAULT_REGION</code> is not already defined in your shell</li> <li>You have specified the region in the <code>config.yaml</code> via <code>DefaultRegion</code></li> <li>You have not set the <code>--no-region</code> flag on the CLI</li> <li>If <code>$AWS_SSO_DEFAULT_REGION</code> is set, does it match <code>$AWS_DEFAULT_REGION?</code></li> </ul> <p>If the above are true, then AWS SSO will define both:</p> <ul> <li><code>$AWS_DEFAULT_REGION</code></li> <li><code>$AWS_SSO_DEFAULT_REGION</code></li> </ul> <p>to the default region as defined by <code>config.yaml</code>.  If the user changes roles and the two variables are set to the same region, then AWS SSO will update the region.   If the user ever overrides the <code>$AWS_DEFAULT_REGION</code> value or deletes the <code>$AWS_SSO_DEFAULT_REGION</code> then AWS SSO will no longer manage the variable.</p> <p></p>"},{"location":"FAQ/#example-of-multiple-aws-sso-instances","title":"Example of multiple AWS SSO instances","text":"<p>This is an example of how to configure two different AWS SSO instances:</p> <pre><code>SSOConfig:\n  Primary:\n    SSORegion: us-east-2\n    StartUrl: https://d-123455555.awsapps.com/start\n  Testing:\n      SSORegion: us-east-1\n      StartUrl: https://d-906766e422.awsapps.com/start\nDefaultSSO: Primary\n</code></pre> <p>With the above config, <code>Primary</code> is the default AWS SSO instance, but you can select <code>Testing</code> via the <code>--sso</code> argument or <code>$AWS_SSO</code> environment variable.</p>"},{"location":"FAQ/#using-non-default-aws-sso-instances-with-auto-complete","title":"Using non-default AWS SSO instances with auto-complete","text":"<p>The handling of the auto-completion of the <code>-A</code>, <code>-R</code>, and <code>-a</code> flags happens before processing of the command line arguments so you can not use the <code>--sso</code> / <code>-S</code> flag to specify a non-default AWS SSO instance.  The result is it will always present your DefaultSSO list of accounts and roles.</p> <p>If you wish to use auto-complete with a different AWS SSO instance, you must first set the <code>AWS_SSO</code> environment variable in your shell:</p> <pre><code>export AWS_SSO=OtherInstance\naws-sso console ...\n</code></pre> <p>Note, the following shorter version of specifying it as a single command does not work:</p> <pre><code>AWS_SSO=OtherInstance aws-sso console ...\n</code></pre>"},{"location":"FAQ/#firefox-container-coloricon-doesnt-change","title":"Firefox container color/icon doesn't change","text":"<p>If you have modified your <code>Color</code> or <code>Icon</code> tag for an Account/Role and the label doesn't change in Firefox, you will need to delete the container so that it can be re-created or manually change the color/icon in the Firefox setings <code>about:preferences#containers</code>.</p> <p></p>"},{"location":"FAQ/#multiple-aws-sso-instances","title":"Multiple AWS SSO Instances","text":"<p>If you are using multiple AWS SSO Instances (multiple SSOConfig blocks) then a few comments:</p> <ol> <li>You really want to use the Firefox Containers plugin described above.  You     will have a horrible time without this because you need to have different     browser sessions/cookies for each AWS SSO Instance.</li> <li>Choosing your DefaultSSO is important because     auto-complete almost always will pick the DefaultSSO.</li> <li>To override the <code>DefaultSSO</code> with auto-complete, you can't use the <code>-S</code>     or <code>--sso</code> flag because of a limitation with how shell completion works.  Instead you must     first <code>export AWS_SSO=&lt;name&gt;</code> and then run the command.</li> </ol>"},{"location":"FAQ/#using-aws-sso-on-remote-hosts","title":"Using aws-sso on remote hosts","text":"<p>There are two primary ways of using <code>aws-sso</code> on a remote host:</p> <p>The first is by installing <code>aws-sso</code> and copying over your <code>~/.aws-sso/config.yaml</code>. You will also most likely need to set <code>UrlAction: print</code> since you will find it difficult to automatically open the browser.  This has the additional downside that you will have an independant SecureStore storing all the credentials which can be annoying if you're dealing with many remote hosts.</p> <p>The alternative is to run the ECS Server locally and then use ssh port forwarding to make all the IAM credentials stored in the ECS Server which can then be available to any remote host you login to.</p>"},{"location":"FAQ/#security","title":"Security","text":""},{"location":"FAQ/#how-do-i-delete-all-secrets-from-the-macos-keychain","title":"How do I delete all secrets from the macOS keychain?","text":"<ol> <li>Open <code>/Applications/Utilities/Keychain Access.app</code></li> <li>Choose the <code>login</code> keychain</li> <li>Find the entry named <code>aws-sso-cli</code> and right click -&gt; <code>Delete \"aws-sso-cli\"</code></li> </ol>"},{"location":"FAQ/#which-securestore-should-i-use","title":"Which SecureStore should I use?","text":"<p>The answer depends, but if you are running AWS SSO CLI on macOS then I recommend to use the default <code>keychain</code>.  Windows users should use the default <code>wincred</code> store.  Both utilize the secure storage provided by Apple/Microsoft and generally provides good security and ease of use.</p> <p>If you are running on Linux, then consider <code>kwallet</code>, <code>pass</code> and <code>secret-service</code> depending on which ever password manager you use.</p> <p>You can always fall back to <code>file</code> which is an encrypted file.  Every time you run AWS SSO CLI and it needs to open the file for read/writing data it will prompt you for your password.  This is probably the best option for Linux jumphosts.  In these cases, I suggest using the <code>eval</code> or <code>exec</code> command to load the resulting AWS API credentials into your shell so that you don't have to keep typing in your password contantly.  Of course, you can also set the <code>$AWS_SSO_FILE_PASSWORD</code> environment variable in your shell to avoid typing it in, but please make sure you are aware of the security implications of doing so.</p> <p>Lastly, there is the <code>json</code> storage backend which is not secure.  It literally is a plain, clear text JSON file stored on disk and is no better than the official AWS tooling.  It is included here only for debug and development purposes only.</p> <p>Is there another secure storage backend you would like to see AWS SSO CLI support?  If so, please open a feature request and let me know!</p>"},{"location":"FAQ/#does-aws-sso-support-using-aws-fips-endpoints","title":"Does aws-sso support using AWS FIPS endpoints?","text":"<p>Yes!  Please set the following environment variable and <code>aws-sso</code> will automatically select the appropriate AWS FIPS endpoints when communicating with AWS:</p> <p><code>AWS_USE_FIPS_ENDPOINT=true</code></p>"},{"location":"FAQ/#are-macos-keychain-items-synced","title":"Are macOS Keychain items synced?","text":"<p>No. If you are using the macOS keychain, none of the secrets stored by <code>aws-sso</code> are synced via iCloud to your other Apple devices.</p>"},{"location":"FAQ/#how-can-i-stop-typing-my-password-all-the-time","title":"How can I stop typing my password all the time?","text":"<p>Choosing a SecureStore is important from a usability &amp; security perspective.  The default options for MacOS and Windows should generally be the best, but Linux users default to <code>file</code> for compatibility sake.</p> <p>Unfortunately, the <code>file</code> option requires you to enter your password pretty much every time you use <code>aws-sso</code>.  For that reason, I recommend using the pass option which uses GPG and optionally the <code>gpg-agent</code> for caching of your GPG passphrase.  Please note that configuring pass, GPG and the gpg-agent are outside of the scope of this documentation.</p>"},{"location":"FAQ/#im-now-getting-a-warning-in-macos-after-upgrading-aws-sso-cli","title":"I'm now getting a warning in macOS after upgrading aws-sso-cli?","text":"<p>As of v1.9.10, <code>aws-sso-cli</code> is now distributed as a bottle in homebrew and these binaries are not signed and will generate a warning that the binary has changed.</p> <p>If you prefer the old way of building locally from source to avoid the warning you should use <code>brew install -s aws-sso-cli</code> or <code>brew upgrade -s aws-sso-cli</code>.</p>"},{"location":"FAQ/#profiles-and-tags","title":"Profiles and Tags","text":""},{"location":"FAQ/#accountalias-vs-accountname","title":"AccountAlias vs AccountName","text":"<p>Due to poor decisions on my part, this is ugly.  Sorry about that.  With that said...</p> <p>The <code>AccountAlias</code> is defined by the AWS account owner for the account via the AWS Console.  However, this is not the AWS Account Alias, but rather the AWS Account Name which is retrieved via the AWS sso:ListAccount API.</p> <p>The <code>AccountName</code> is defined explicitly in the <code>~/.aws-sso/config.yaml</code> file like this:</p> <pre><code>SSOConfig:\n  Default:\n    SSORegion: us-east-1\n    StartUrl: https://d-23234235.awsapps.com/start\n    Accounts:\n      2347575757:\n        Name: Production\n</code></pre> <p>or automatically via the ProfileFormat config option.</p> <p>So when you specify <code>AccountAlias</code> in the ProfileFormat or see it in the list command, you're actually using the AWS Account Name set by the account owner.</p>"},{"location":"FAQ/#defining-aws_profile-and-aws_sso_profile-variable-names","title":"Defining <code>$AWS_PROFILE</code> and <code>$AWS_SSO_PROFILE</code> variable names","text":"<p>As covered here, AWS SSO CLI will set the <code>$AWS_SSO_PROFILE</code> variable when you use exec or eval and can honor the <code>$AWS_PROFILE</code> variable.</p> <p>AWS SSO CLI tries to make it easy to manage many roles across many accounts by giving users a lot of control over what the value of these variables are for each role.</p> <ul> <li>You can use ProfileFormat to create an     auto-generated profile name for each role based upon things like the     AccountID, AccountName, RoleName, etc.</li> <li>You can also use Profile to define a profile name for     any specific role.</li> <li>You can also use both: <code>ProfileFormat</code> to set a default value and override     specific roles that you use more often via <code>Profile</code> with an easier to     remember value.  The choice is yours, but remember that every unique Role     ARN needs a unique value if you wish to use it to select a role to use     via <code>$AWS_PROFILE</code> and the config-profiles     command.</li> </ul>"},{"location":"FAQ/#how-to-configure-profileformat","title":"How to configure ProfileFormat","text":"<p><code>aws-sso</code> uses the <code>ProfileFormat</code> configuration option for two different purposes:</p> <ol> <li>Makes it easy to modify your shell <code>$PROMPT</code> to include information     about what AWS Account/Role you have currently assumed by defining the     <code>$AWS_SSO_PROFILE</code> environment variable.</li> <li>Makes it easy to select a role via the <code>$AWS_PROFILE</code> environment variable     when you use the config-profiles command.</li> </ol> <p>By default, <code>ProfileFormat</code> is set to <code>{{ .AccountIdPad }}:{{ .RoleName }}</code> which will generate a value like <code>02345678901:MyRoleName</code>.  For a complete list of available variable names, see ProfileFormat.</p> <p>In my experience you can change the <code>ProfileFormat</code> to pretty much any valid ASCII string that does not include whitespace or special characters that would be evaluated by your shell (<code>$</code>, etc) or the AWS configuration file such as <code>[</code>, <code>]</code>.  (Note: if you can find official AWS documentation on this subject, please let me know!)</p> <p>Some example <code>ProfileFormat</code> values:</p> <ul> <li><code>'{{ FirstItem .AccountName .AccountAlias }}'</code> -- If there     is an Account Name set in the config.yaml print that, otherwise print the     Account Name defined by the AWS account owner.</li> <li><code>'{{ .AccountIdPad }}'</code> -- Pad the AccountId with leading zeros if it is &lt; 12 digits long</li> <li><code>'{{ .AccountId }}'</code> -- Print the AccountId as a regular number</li> <li><code>'{{ StringsJoin \":\" .AccountAlias .RoleName }}'</code> -- Another     way of writing <code>{{ .AccountAlias }}:{{ .RoleName }}</code></li> <li><code>'{{ StringReplace \" \" \"_\" .AccountAlias }}'</code> -- Replace any spaces (<code></code>) in the AccountAlias with an underscore (<code>_</code>).</li> <li><code>'{{ FirstItem .AccountName (nospace .AccountAlias) }}:{{ .RoleName }}'</code>     -- Use the Account Name if set, otherwise use the Account Alias (without spaces via     nospace)     and then append a colon, followed by the IAM Role Name.</li> <li><code>'{{ kebabcase .AccountAlias }}:{{ .RoleName }}'</code>     -- Reformat the AWS account alias like <code>AStringLikeThis</code> into <code>a-string-like-this</code> using     the kebabcase function.</li> </ul> <p>For a full list of available variables and functions, see the ProfileFormat config option.</p> <p>To see a list of values across your roles for a given variable, you can use the list command.</p>"},{"location":"FAQ/#spaces-are-invalid-in-profile-names","title":"Spaces are invalid in Profile names","text":"<p>If your ProfileFormat contains either <code>AccountName</code> or <code>AccountAlias</code> you may end up with an invalid Profile name which contains a space.</p> <p>Their are two possible solutions:</p> <ol> <li>Don't include a space in the AccountName</li> <li>Strip/replace the space via the ProfileFormat option</li> </ol>"},{"location":"FAQ/#what-are-the-purpose-of-the-tags","title":"What are the purpose of the Tags?","text":"<p>Tags are key/value pairs that you can use to search for roles to assume when using the exec command.</p> <p>The <code>~/.aws-sso/config.yaml</code> file supports defining tags at the <code>Account</code> and <code>Role</code> levels.  These tags make it easier to manage many roles in larger scale deployments with lots of AWS Accounts. AWS SSO CLI adds a number of tags by default for each role and a full list of tags can be viewed by using the tags command.</p>"},{"location":"FAQ/#errors-and-their-meaning","title":"Errors and their meaning","text":""},{"location":"FAQ/#error-invalid-grant-provided","title":"Error: Invalid grant provided","text":"<p>If you get this error from AWS:</p> <p></p> <p>Then the most likely cause is you selected the wrong AWS Region for SSORegion in the config file.</p>"},{"location":"FAQ/#error-unable-to-save-orgfreedesktopdbusproperties","title":"Error: Unable to save... org.freedesktop.DBus.Properties","text":"<p>On Linux systems or other places that rely on the FreeDesktop secret-service you may sometimes receive an error like:</p> <p><code>ERROR   Unable to save RegisterClientData error=\"the interface org.freedesktop.DBus.Properties does not exist\"</code></p> <p>This apparently happens when the underlying FreeDesktop secret-service crashes. Depending on your OS and setup, running:</p> <p><code>gnome-keyring-daemon -r -d</code></p> <p>as your default (non-root) user, but be sure to check the relevant documentation with your OS for best practices.</p>"},{"location":"FAQ/#error-unexpected-accesstoken-failure-refreshing","title":"Error: Unexpected AccessToken failure; refreshing","text":"<p>This can happen when querying AWS for a list of AWS Accounts or Roles and may indicate that AWS is throttling requests because the number of Threads is too high.</p> <p>Note: Unlike most errors, this one is not always fatal, but it can cause <code>aws-sso</code> to behave very poorly.</p>"},{"location":"FAQ/#warning-exceeded-maxretrymaxbackoff-consider-tuning-values","title":"Warning: Exceeded MaxRetry/MaxBackoff. Consider tuning values","text":"<p>While trying to refresh the cache of accounts and roles, <code>aws-sso</code> is exceeding the rate limits put in place by AWS and that rate limiting is causing the number of retries to exceed the MaxRetry limit.</p> <p>This typically will happen with large numbers of accounts and multiple threads.</p> <p>You may wish to consider reducing the number of Threads to reduce chances of this happening (fewer threads can increase performance by not incurring the backoff delay penalty) or adjust the MaxRetry and/or MaxBackoff parameters.</p>"},{"location":"FAQ/#warning-fetching-roles-for-46-accounts-this-might-take-a-while","title":"Warning: Fetching roles for 46 accounts, this might take a while","text":"<p>Due to the AWS API and rate limits, users with many AWS Accounts may see this warning.  If this happens more often than is acceptable, you can set CacheRefresh to a higher value (cache roles for longer) or you can completely disable the auto-refresh of the cache by setting <code>CacheRefresh</code> to <code>0</code>.</p>"},{"location":"FAQ/#error-response-from-daemon-client-version-146-is-too-new-maximum-supported-api-version-is-145","title":"Error response from daemon: client version 1.46 is too new. Maximum supported API version is 1.45","text":"<p>The version of the Docker Go SDK used by <code>aws-sso</code> is higher than the version supported by your Docker daemon.  Run <code>export DOCKER_API_VERSION=1.45</code> (set the version appropriate based on the error message) to fix.</p>"},{"location":"FAQ/#misc","title":"Misc","text":""},{"location":"FAQ/#what-is-the-story-with-homebrew-support","title":"What is the story with Homebrew support?","text":"<p>Initially, <code>aws-sso-cli</code> was distributed as an independant tap but as of v1.9.10 it has been added to homebrew-core.</p> <p>As of v1.9.10, I will no longer be maintaing the above tap, but because of the way homebrew works, the version in homebrew-core supercedes the old tap so no user intervention is necessary.</p>"},{"location":"FAQ/#how-good-is-the-windows-support","title":"How good is the Windows support?","text":"<p>In a word: alpha.</p> <p>For best experience, I recommend using CommandPrompt (<code>cmd.exe</code>) instead of PowerShell or MINGW64/bash.  Not that you can't use PowerShell or bash, but there are a number of terminal related issues which cause <code>aws-sso</code> to behave incorrectly. PowerShell and MINGW64/bash users should rely on CLI arguments rather than the interactive role selector.</p> <p>Tracking ticket</p> <p>Now that #188 has been fixed, PowerShell users can use the <code>eval</code> command to load IAM credentials into their current shell.</p> <p>If you are a Windows user and experience any bugs, please open a detailed bug report.</p>"},{"location":"FAQ/#how-can-i-say-thanks","title":"How can I say thanks?","text":"<p>Honestly, just send me an email saying thanks or \"star\" this project in GitHub is enough thanks.</p> <p>Occasionally, someone will ask about giving me a few bucks, but I really don't need any money.  If you still would like to throw a few bucks my way, I'd much rather you donate to Second Harvest Food Bank which is local to me and could put your money to better work than I would.</p>"},{"location":"aws-vault/","title":"AWS SSO CLI vs AWS Vault","text":""},{"location":"aws-vault/#overview","title":"Overview","text":"<p>Note: I believe this page to be accurate as of <code>aws-vault</code> v6.3.1 and <code>aws-sso</code> v1.9.0. If you believe anything on this page is in error, please let me know!</p> <p>I get asked a lot why you should use AWS SSO CLI over AWS Vault so I decided to write up this comparison.</p> <p>First, I really like <code>aws-vault</code>, I've used in the past and really love how it fixes a lot of the security issues related to the standard AWS CLI tooling. Overall, it's got a great and useful feature set!</p> <p>However, AWS SSO CLI is focused on integrating with AWS SSO.  If you're using the older SAML integration then neither <code>aws-vault</code> or <code>aws-sso</code> are going to help.  If you're still using static AWS API Keys (storing them in your <code>~/.aws/credentials</code> file) then <code>aws-vault</code> clearly has the strongest feature set today, but I hope to address that in the near future.</p> <p>Last, I want to point out that my tool uses the same secure storage library that 99designs wrote for <code>aws-vault</code> so thanks to them for making that available!</p>"},{"location":"aws-vault/#how-aws-vault-and-the-aws-cli-v2-tooling-works","title":"How AWS Vault and the AWS CLI v2 tooling works","text":"<p>Because of it's early focus on securely managing static AWS API credentials and integration with the existing <code>~/.aws/config</code> file, <code>aws-vault</code> still is weighed down with the limitations of syntax and structure of the <code>~/.aws/config</code> file.</p> <p>For smaller organizations with few AWS accounts and less advanced least priviledge access policies where users are not always assuming different roles with only the permissions they need to complete at task, this fundamentally works just fine.</p> <p>But as your organization grows and you start implimenting more advanced workflows, where users (especially in cross-functional organizations like centralized Operations and Security teams) may need to access dozens or even hundreds of AWS accounts and even more AWS roles to choose from, the standard AWS tooling and configuration file really shows its warts.</p> <p>This is also where existing AWS customers start looking at migrating to AWS SSO because it just scales and generally works better.</p> <p>On top of this, the standard <code>~/.aws/config</code> file's support for AWS SSO was done in a way which made the Amazon developers lives easier, but not the user.  For example for every AWS Role you wish to assume via AWS SSO you have to write a block like this (<code>aws-vault</code> or AWS CLI v2):</p> <pre><code>[profile MyUniqueProfileName]\nsso_start_url = https://foobar.awsapps.com/start\nsso_region = us-east-1\nsso_account_id = 012345678912\nsso_role_name = MyRoleName\n</code></pre> <p>If you have 10 roles, that's 10 blocks.  Or 100 roles, well it's 100 blocks. And every time you are given access to a new role (maybe a new AWS Account?) you have to go in, select a unique profile name and write the block. At some point users start complaining because this is \"unmanageable\" and \"hard to use\".</p> <p>But remember it's called Single Sign On... why are we defining generally global values like <code>sso_start_url</code> or <code>sso_region</code> over and over again?</p> <p>Also, because of how SSO works with PermissionSets, it's quite likely a user will have the same <code>sso_role_name</code> in many different AWS Accounts but we have a flat namespace of <code>profile</code> names to work with. This might work fine for users who only need to access a handful of accounts and roles, but at scale (and AWS SSO is obviously designed for larger organizations) this becomes a problem that each user must deal with and neither AWS CLI tooling or <code>aws-vault</code> really provide any substantive help.</p>"},{"location":"aws-vault/#how-aws-sso-cli-is-different","title":"How AWS SSO CLI is different","text":"<p>AWS SSO CLI on the otherhand started life focused on integrating with AWS SSO. I made the decision early on to support accessing AWS SSO Roles without requiring the user to make any changes to their <code>~/.aws/config</code> file and want to create a user experience that is a joy to use as their organization grows.</p> <p>The result is that:</p> <ol> <li>Users define their AWS SSO Instance values (<code>StartUrl</code> and <code>SSORegion</code>)     only once. And yes, multiple SSO Instances are supported!</li> <li>Users are not required to pre-define the AWS Accounts or Roles they     wish to access.  This is auto-discovered by <code>aws-sso</code> via the AWS API.</li> <li>The <code>aws-sso</code> configuration file has a simple hierarchy which eliminates     the need to repeat the same configuration block or statements.     Don't repeat yourself!</li> <li>Naming is hard!  Instead of forcing you to give each role a single unique     name, <code>aws-sso</code> offers multiple ways to select a role at any time:<ul> <li>Users can select a role via an interactive search prompt using tags-     just like you have with Gmail.  Tags include all the metadata that the     AWS SSO API exposes as well as any user defined key/value pairs.</li> <li>For people who don't like interactive searches, you can select using     a <code>profile</code> value which is automatically generated via a powerful     template engine OR by any user defined value.  Yes, you can even use     the template for some roles and the user defined <code>profile</code> name for     your most commonly used roles.</li> <li>You can always select via standardized values like the Role ARN or     AccountId and RoleName.</li> <li>Of course, non-interactive (CLI) selection of roles supports     tab-completion!</li> </ul> </li> <li>Migrating to AWS SSO?  <code>aws-sso</code> is here to help.  It supports     discovering all your AWS SSO roles and writing entries to your     <code>~/.aws/config</code> file for you.  Now you can set your <code>$AWS_PROFILE</code>     (or <code>--profile</code> flag) and take advantage of securely storing all your      credentials.</li> </ol> <p>If this sounds interesting, maybe it's worth checking out the demos or jumping ahead to the Quickstart Guide to get it installed and configured!</p>"},{"location":"aws-vault/#feature-comparison","title":"Feature Comparison","text":"Feature aws-vault aws-sso AWS CLI v2 Secure store creds Yes Yes No Static AWS API Creds Yes No Yes SAML auth support No No No AWS SSO support Yes Yes Yes Web Identity support Yes No Yes Open AWS web console Yes Yes No Bulk SSO Role discovery No Yes No Read ~/.aws/config Yes No Yes Write ~/.aws/config No Yes Yes User defined ENV vars No Yes No $AWS_PROFILE templates No Yes No Role chaining Yes Yes Yes CLI auto-complete Yes Yes Yes EC2/ECS Metadata server Yes Yes No Firefox Containers No Yes No Exec new shell with AWS creds Yes Yes No Detect $AWS_PROFILE collision No Yes Yes Add AWS creds into current shell No Yes No Select Role Via aws-vault aws-sso AWS CLI v2 $AWS_PROFILE Yes Yes Yes Profile name (CLI) Yes Yes Yes Tags No Yes No Role ARN No Yes No AccountId &amp; RoleName No Yes No"},{"location":"code-sign-key.asc/","title":"Release Signing Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: GPGTools - http://gpgtools.org\n\nmDMEY0TwbxYJKwYBBAHaRw8BAQdAcyI+FWEJkhDkidJbO0YRCnATwbMEc3xMRfT5\n65FZ3TK0I0Fhcm9uIFR1cm5lciA8c3luZmluYXRpY0BnbWFpbC5jb20+iJMEExYI\nADsCGwMFCwkIBwICIgIGFQoJCAsCBBYCAwECHgcCF4AWIQQNP7U7AclW1p82qImj\nHvWzVTfKggUCY0TxgwAKCRCjHvWzVTfKgkTiAQDFMdT9A2cki5MHB/CKZTmD+4qz\n46XQpeXh2G2J0Zv9GwD/aendXp+/dowoSfwz+SslX4yuW/n+dRsDDHHS+ZA8MgeJ\nAjMEEAEIAB0WIQTkGXVzANufRHGXoVuTbtMPiArcGwUCY0Tx1QAKCRCTbtMPiArc\nG/e5D/4p0aXSMgahg6Tlrz4p7e8Ttj9UhnFuiO/koCPPgO80CspJDDog9h5vxDP7\nDYFw4psfEo6J8/BbFmg7DgbeIL2N0Rkd6xTSMQOxgJNG6XhnKFdgHyxARBJcj+rO\nI14CtxQz1/ZQmJ861CjACp1kcdfhDCZfxS4aXyNVbawd5S8g27R1xfA+siVJmVIA\nLdRNFjvaUbc1/fDVFKFNbrFONMvF8PPNkEJUiu2qgVGq9JsqMAGcYvKd7QgGD1RA\nNMiZEORGCibt5ameG9r0Cr3IIp2g2FHZaJVy0RsoUtBcAvPiCSFvtFw79c+OOnXy\nmcQcKa840v1bSp0i1SPK4SUlTDCDytMicVqPSI3ZUnWsyl3jeUPlGHxtS1jqEUGV\nRoFyd1l/mS5n9diN5FaPbpgjPppPz8YOvolfec7e4SY0BcmyrIh7aXpI5DwdL443\nWSVAc1sMU6+VeU//iWU/ujJyOU6fBnRKaJ4uMvcqLG2tn1C3xK1Sq3g5hF8t6Xkm\nIspoBm8qL8dRw5T9HvQZ8nGLrYn5vw49kbtVDBnW2CIUfnXu1BWj970nLyAba6gJ\nDk6nq2jxxSoO0EqSCoiHNZvGA5eVpAF88E4XkiLnSuz/o2E/yPJ/6NQiwC8OiQlR\nCUl5Y4w8jzjxzZshvoXLU8+rDv7zphRgJEgf07YwHbkqj54A2Lg4BGNE8G8SCisG\nAQQBl1UBBQEBB0CDPgu42gChv71QBvDx7VKjdszj+sH0fWpxGOHjJqQ8SAMBCAeI\neAQYFggAIAIbDBYhBA0/tTsByVbWnzaoiaMe9bNVN8qCBQJjRPG4AAoJEKMe9bNV\nN8qC7okA/RB5WC73YSo4wsPfJooVZK6Cg6RBECMnqrOpJOlONIN+AQDhOWCSmQc0\ni7Ang/nWsktzm+xMOOzZKjhVqHKxHs1xBg==\n=uQfC\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"commands/","title":"aws-sso Commands","text":""},{"location":"commands/#common-flags","title":"Common Flags","text":"<ul> <li><code>--help</code>, <code>-h</code> -- Builtin and context sensitive help</li> <li><code>--browser &lt;path&gt;</code>, <code>-b</code> -- Override default browser to open AWS SSO URL (<code>$AWS_SSO_BROWSER</code>)</li> <li><code>--config &lt;file&gt;</code> -- Specify alternative config file (<code>$AWS_SSO_CONFIG</code>)</li> <li><code>--level &lt;level&gt;</code>, <code>-L</code> -- Change default log level: [error|warn|info|debug|trace]</li> <li><code>--lines</code> -- Print file number with logs</li> <li><code>--sso &lt;name&gt;</code>, <code>-S</code> -- Specify non-default AWS SSO instance to use (<code>$AWS_SSO</code>)</li> </ul>"},{"location":"commands/#commands","title":"Commands","text":""},{"location":"commands/#cache","title":"cache","text":"<p>AWS SSO CLI caches information about your AWS Accounts, Roles and Tags for better perfomance.  By default it will refresh this information after 24 hours, but you can force this data to be refreshed immediately.</p> <p>Cache data is also automatically updated anytime the <code>config.yaml</code> file is modified.</p> <p>Flags:</p> <ul> <li><code>--no-config-check</code> -- Disable automatic updating of <code>~/.aws/config</code></li> <li><code>--threads &lt;int&gt;</code> -- Number of threads to use with AWS (default: 5)</li> </ul>"},{"location":"commands/#console","title":"console","text":"<p>Console generates a URL which will grant you access to the AWS Console in your web browser.  The URL can be sent directly to the browser (default), printed in the terminal or copied into the Copy &amp; Paste buffer of your computer.</p> <p>Note: Normally, you can only have a single active AWS Console session at a time, but multiple session are supported via the open-url-in-container configuration option.</p> <p>Flags:</p> <ul> <li><code>--duration &lt;minutes&gt;</code>, <code>-d</code> -- AWS Session duration in minutes (default 60)</li> <li><code>--prompt</code>, <code>-P</code> -- Force interactive prompt to select role</li> <li><code>--region &lt;region&gt;</code>, <code>-r</code> -- Specify the <code>$AWS_DEFAULT_REGION</code> to use</li> <li><code>--arn &lt;arn&gt;</code>, <code>-a</code> -- ARN of role to assume (<code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--account &lt;account&gt;</code>, <code>-A</code> -- AWS AccountID of role to assume (<code>$AWS_SSO_ACCOUNT_ID</code>)</li> <li><code>--role &lt;role&gt;</code>, <code>-R</code> -- Name of AWS Role to assume (requires <code>--account</code>) (<code>$AWS_SSO_ROLE_NAME</code>)</li> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Name of AWS Profile to assume</li> <li><code>--url-action</code>, <code>-u</code> -- How to handle URLs for your SSO provider</li> <li><code>--sts-refresh</code> -- Force refresh of STS Token Credentials</li> </ul> <p>The generated URL is good for 15 minutes after it is created.</p> <p>The common flag <code>--url-action</code> is used both for AWS SSO authentication as well as what to do with the resulting URL from the <code>console</code> command.</p> <p>Priority is given to:</p> <ul> <li><code>--prompt</code></li> <li><code>--profile</code></li> <li><code>--arn</code> (<code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--account</code> (<code>$AWS_SSO_ACCOUNT_ID</code>) and <code>--role</code> (<code>$AWS_SSO_ROLE_NAME</code>)</li> <li><code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and <code>AWS_SESSION_TOKEN</code> environment variables</li> <li><code>AWS_PROFILE</code> environment variable (works with both SSO and static profiles)</li> <li>Prompt user interactively</li> </ul>"},{"location":"commands/#credentials","title":"credentials","text":"<p>Generate static credentials in the format for ~/.aws/credentials.</p> <p>This command will expose your temporary AWS IAM credentials in clear text which can be a security issue, and is not recommended except for cases where going through the AWS Identity Center web-based authentication workflow is not possible.  The most common example of this would be integrating with Docker and needing multiple IAM Roles.  Most use cases are better served by using the setup-profiles command or passing in IAM credentials via environment variables.</p> <p>Flags:</p> <ul> <li><code>--file &lt;path&gt;</code>, <code>-f</code> -- Specify the file to generate.  Default is to print to STDOUT ($AWS_SHARED_CREDENTIALS_FILE).</li> <li><code>--append</code>, <code>-a</code> -- Append to the file instead of overwriting it.</li> <li><code>--profile &lt;profile&gt;,...</code>, <code>-p</code> -- One or more profiles to include in the output.</li> <li><code>--sts-refresh</code> -- Force refresh of STS Token Credentials</li> </ul> <p>Note: This command honors the same $AWS_SHARED_CREDENTIALS_FILE that is supported by the AWS SDK to load credentials.  Since these credentials are temporary, it is strongly discouraged that users set this to <code>~/.aws/credentials</code>, but use a temporary file instead.</p>"},{"location":"commands/#ecs","title":"ecs","text":"<p>ecs commands</p>"},{"location":"commands/#eval","title":"eval","text":"<p>Generate a series of <code>export VARIABLE=VALUE</code> lines suitable for sourcing into your shell.  Allows obtaining new AWS credentials without starting a new shell.  Can be used to refresh existing AWS credentials or by specifying the appropriate arguments.</p> <p>Suggested use (bash): <code>eval $(aws-sso eval &lt;args&gt;)</code></p> <p>or if you are using VSCode environment variables you can write the variable to a file:</p> <p><code>aws-sso eval &lt;args&gt; &gt;~/.devcontainer/devcontainer.env</code></p> <p>Shells supported by <code>eval</code>:</p> <ul> <li>bash</li> <li>fish</li> <li>zonsh</li> <li>zsh</li> <li>Windows PowerShell</li> </ul> <p>Flags:</p> <ul> <li><code>--arn &lt;arn&gt;</code>, <code>-a</code> -- ARN of role to assume</li> <li><code>--account &lt;account&gt;</code>, <code>-A</code> -- AWS AccountID of role to assume (requires <code>--role</code>)</li> <li><code>--role &lt;role&gt;</code>, <code>-R</code> -- Name of AWS Role to assume (requires <code>--account</code>)</li> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Name of AWS Profile to assume</li> <li><code>--clear</code>, <code>-c</code> -- Generate \"unset XXXX\" commands to clear the environment</li> <li><code>--no-region</code> -- Do not set the AWS_DEFAULT_REGION from config.yaml</li> <li><code>--refresh</code> -- Refresh current IAM credentials</li> </ul> <p>Priority is given to:</p> <ul> <li><code>--refresh</code> (Uses <code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--profile</code></li> <li><code>--arn</code></li> <li><code>--account</code> and <code>--role</code></li> </ul> <p>Note: The <code>eval</code> command only honors the <code>$AWS_SSO_ROLE_ARN</code> in the context of the <code>--refresh</code> flag.  The <code>$AWS_SSO_ROLE_NAME</code> and <code>$AWS_SSO_ACCOUNT_ID</code> are always ignored.</p> <p>Note: Using <code>--url-action=print</code> is supported, but you must be able to see the output of STDERR to see the URL to open.</p> <p>Note: The <code>eval</code> command is not supported under Windows CommandPrompt or PowerShell.</p> <p>See Environment Variables for more information about what varibles are set.</p>"},{"location":"commands/#windows-powershell","title":"Windows PowerShell","text":"<p>Getting Windows PowerShell to work requires a slightly different invocation than bash/zsh/etc:</p> <p><code>aws-sso eval &lt;args&gt; | Out-String | Invoke-Expression</code></p> <p>But other than that, it works the same way.</p>"},{"location":"commands/#exec","title":"exec","text":"<p>Exec allows you to execute a command with the necessary AWS environment variables.  By default, if no command is specified, it will start a new interactive shell so you can run multiple commands.</p> <p>Flags:</p> <ul> <li><code>--arn &lt;arn&gt;</code>, <code>-a</code> -- ARN of role to assume (<code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--account &lt;account&gt;</code>, <code>-A</code> -- AWS AccountID of role to assume (<code>$AWS_SSO_ACCOUNT_ID</code>)</li> <li><code>--env</code>, <code>-e</code> -- Use existing ENV vars generated by AWS SSO to generate a URL</li> <li><code>--role &lt;role&gt;</code>, <code>-R</code> -- Name of AWS Role to assume (<code>$AWS_SSO_ROLE_NAME</code>)</li> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Name of AWS Profile to assume</li> <li><code>--no-region</code> -- Do not set the AWS_DEFAULT_REGION from config.yaml</li> <li><code>--sts-refresh</code> -- Force refresh of STS Token Credentials</li> </ul> <p>Arguments: <code>[&lt;command&gt;] [&lt;args&gt; ...]</code></p> <p>Priority is given to:</p> <ul> <li><code>--profile</code></li> <li><code>--arn</code> (<code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--account</code> (<code>$AWS_SSO_ACCOUNT_ID</code>) and <code>--role</code> (<code>$AWS_SSO_ROLE_NAME</code>)</li> <li>Prompt user interactively</li> </ul> <p>You can not run <code>exec</code> inside of another <code>exec</code> shell.</p> <p>See Environment Variables for more information about what varibles are set.</p>"},{"location":"commands/#process","title":"process","text":"<p>Process allows you to use AWS SSO as an external credentials provider with profiles defined in <code>~/.aws/config</code>.</p> <p>Flags:</p> <ul> <li><code>--arn &lt;arn&gt;</code>, <code>-a</code> -- ARN of role to assume</li> <li><code>--account &lt;account&gt;</code>, <code>-A</code> -- AWS AccountID of role to assume</li> <li><code>--role &lt;role&gt;</code>, <code>-R</code> -- Name of AWS Role to assume (requires <code>--account</code>)</li> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Name of AWS Profile to assume</li> <li><code>--sts-refresh</code> -- Force refresh of STS Token Credentials</li> </ul> <p>Priority is given to:</p> <ul> <li><code>--profile</code></li> <li><code>--arn</code></li> <li><code>--account</code> and <code>--role</code></li> </ul> <p>Note: The <code>process</code> command does not honor the <code>$AWS_SSO_ROLE_ARN</code>, <code>$AWS_SSO_ACCOUNT_ID</code>, or <code>$AWS_SSO_ROLE_NAME</code> environment variables.</p> <p>Note: Due to a limitation of the AWS tooling, setting <code>--url-action print</code> will cause an error because of a limitation of the AWS tooling which prevents it from working.</p>"},{"location":"commands/#list","title":"list","text":"<p>List will list all of the AWS Roles you can assume with the metadata/tags available to be used for interactive selection with <code>exec</code>.  You can control which fields are printed by specifying the field names as arguments.</p> <p>Flags:</p> <ul> <li><code>--list-fields</code>, <code>-f</code> -- List the available fields to print</li> <li><code>--prefix &lt;FieldName&gt;=&lt;Prefix&gt;</code>, <code>-P</code> -- Filter results by the given field     value &amp; prefix value</li> <li><code>--csv</code> -- Generate results in CSV format</li> <li><code>--sort &lt;FieldName&gt;</code>, <code>-s</code> -- Sort results by the provided field name</li> <li><code>--reverse</code> -- Reverse the sort order</li> </ul> <p>Arguments: <code>[&lt;field&gt; ...]</code></p> <p>The arguments are a list of fields to display in the report.  Overrides the defaults and/or the specified ListFields in the <code>config.yaml</code>.</p> <p>Default fields:</p> <ul> <li><code>AccountIdPad</code></li> <li><code>AccountAlias</code></li> <li><code>RoleName</code></li> <li><code>Expires</code></li> </ul> <p>Note: Sorting for <code>AccountIdPad</code> and <code>Expires</code> is done via their respective <code>AccountId</code> and <code>ExpiresEpoch</code> integer values.  Expired entries are considered to be very large.  All other fields are sorted alphabetically and in a case-sensitive manner.</p>"},{"location":"commands/#login","title":"login","text":"<p>Login via AWS IAM Identity Center (AWS SSO) and retrieve a security token used to fetch IAM Role credentials.  As of <code>aws-sso</code> v2.x this is required unless you enable AutoLogin.</p> <p>When you login, <code>aws-sso</code> will attempt to refresh your cache of IAM Roles per the CacheRefresh setting.</p> <p>Flags:</p> <ul> <li><code>--no-config-check</code> -- Disable automatic updating of <code>~/.aws/config</code></li> <li><code>--url-action</code>, <code>-u</code> -- How to handle URLs for your SSO provider</li> <li><code>--sts-refresh</code> -- Force refresh of STS Token Credentials</li> <li><code>--threads &lt;int&gt;</code> -- Number of threads to use with AWS (default: 5)</li> </ul>"},{"location":"commands/#logout","title":"logout","text":"<p>Invalidates the AWS Identity Center AccessToken (used to fetch new IAM Credentials) for the selected SSO instance and removes all IAM Role Credentials cached in the <code>aws-sso</code> secure store.</p>"},{"location":"commands/#setup-completions","title":"setup completions","text":"<p>Configures your appropriate shell configuration file to add auto-complete and Shell Helpers functionality for commands, flags and options. Must restart your shell for this to take effect.</p> <p>For more information about this feature, please read the quickstart.</p> <p>Flags:</p> <ul> <li><code>--source</code> -- Print out the completions for sourcing into the current shell</li> <li><code>--install</code> -- Install the new v1.9+ shell completions scripts</li> <li><code>--uninstall</code> -- Uninstall the new v1.9+ shell completions scripts</li> <li><code>--shell &lt;shell&gt;</code> -- Override the detected shell</li> <li><code>--shell-script &lt;file&gt;</code> -- Override the default shell script file to modify</li> </ul>"},{"location":"commands/#setup-ecs","title":"setup ecs","text":"<p>See the setup ecs commands in the ECS Server command documentation.</p>"},{"location":"commands/#setup-profiles","title":"setup profiles","text":"<p>Modifies the <code>~/.aws/config</code> file to contain a named profile for every role accessible via AWS SSO CLI.</p> <p>Flags:</p> <ul> <li><code>--diff</code> -- Print a diff of changes to the config file instead of modifying it</li> <li><code>--print</code> -- Print profile entries instead of modifying config file</li> <li><code>--force</code> -- Write a new config file without prompting</li> <li><code>--aws-config</code> -- Override path to <code>~/.aws/config</code> file</li> </ul> <p>By default, each profile is named according to the ProfileFormat config option or overridden by the user defined Profile option on a role by role basis.</p> <p>For each profile generated, it will specify a list of settings as defined by the ConfigVariables setting in the <code>~/.aws-sso/config.yaml</code>.</p> <p>For more information on this feature, read the Quickstart Guide.</p> <p>Unlike with other ways to use AWS SSO CLI, the AWS IAM STS credentials will automatically refresh.  This means, if you do not have a valid AWS SSO token, you will be prompted to authentiate via your SSO provider and subsequent requests to obtain new IAM STS credentials will automatically happen as needed.</p> <p>Note: You should run this command any time your list of AWS roles changes in order to update the <code>~/.aws/config</code> file or enable AutoConfigCheck.</p> <p>Note: It is important that you do NOT remove the <code># BEGIN_AWS_SSO_CLI</code> and <code># END_AWS_SSO_CLI</code> lines from your config file!  These markers are used to track which profiles are managed by AWS SSO CLI.</p> <p>Note: This command does not honor the <code>--sso</code> option as it operates on all of the configured AWS SSO instances in the <code>~/.aws-sso/config.yaml</code> file.</p>"},{"location":"commands/#setup-wizard","title":"setup wizard","text":"<p>Allows you to run through the configuration wizard and update your AWS SSO CLI config file (<code>~/.aws-sso/config.yaml</code>).   By default, it only does a very basic configuration to get started with.  The <code>--advanced</code> flag prompts for more settings and is useful for taking advantage of some of the new settings if you've upgraded from a previous version!</p> <p>Flags:</p> <ul> <li><code>--advanced</code> -- Prompts for many more config options</li> </ul>"},{"location":"commands/#tags","title":"tags","text":"<p>Tags dumps a list of AWS SSO roles with the available metadata tags.</p> <p>Flags:</p> <ul> <li><code>--account &lt;account&gt;</code> -- Filter results by AccountId</li> <li><code>--role &lt;role&gt;</code> -- Filter results by Role Name</li> </ul> <p>By default the following key/values are available as tags to your roles:</p> <ul> <li><code>AccountID</code> -- AWS Account ID</li> <li><code>Role</code> -- AWS Role Name</li> <li><code>Email</code> -- Email address of root account associated with the AWS Account</li> <li><code>AccountName</code> -- Account Name for any role defined in config (see below)</li> <li><code>AccountAlias</code> --- AWS Account Alias defined by account administrator</li> <li><code>History</code> -- Tag tracking if this role was recently used.  See <code>HistoryLimit</code>         in config.</li> </ul>"},{"location":"commands/#time","title":"time","text":"<p>Print a string containing the number of hours and minutes that the current AWS Role's STS credentials are valid for in the format of <code>HHhMMm</code></p> <p>Note: This command is only useful when you have STS credentials configured in your shell via eval or exec.</p>"},{"location":"commands/#environment-variables","title":"Environment Variables","text":""},{"location":"commands/#honored-variables","title":"Honored Variables","text":"<p>The following environment variables are honored by <code>aws-sso</code>:</p> <ul> <li><code>AWS_CONFIG_FILE</code> -- Override default path to <code>~/.aws/config</code> file</li> <li><code>AWS_SSO_FILE_PASSWORD</code> -- Password to use with the <code>file</code> SecureStore.</li> <li><code>AWS_SSO_CONFIG</code> -- Specify an alternate path to the <code>aws-sso</code> config file.</li> <li><code>AWS_SSO_BROWSER</code> -- Override default browser for AWS SSO login.</li> <li><code>AWS_SSO</code> -- Override default AWS SSO instance to use.</li> <li><code>AWS_SSO_ROLE_NAME</code> -- Used for <code>--role</code>/<code>-R</code> with some commands.</li> <li><code>AWS_SSO_ACCOUNT_ID</code> -- Used for <code>--account</code>/<code>-A</code> with some commands.</li> <li><code>AWS_SSO_ROLE_ARN</code> -- Used for <code>--arn</code>/<code>-a</code> with some commands and with.      <code>eval --refresh</code>.</li> <li><code>AWS_SSO_FIELD_SORT</code> -- Used by <code>list</code> command to select which field to sort by.</li> <li><code>AWS_SSO_FIELD_SORT_REVERSE</code> -- Used to reverse the <code>list</code> sort order.  Set to <code>1</code> to enable.</li> </ul> <p>The <code>file</code> SecureStore will use the <code>AWS_SSO_FILE_PASSWORD</code> environment variable for the password if it is set. (Not recommended.)</p> <p>Additionally, <code>$AWS_PROFILE</code> is honored via the standard AWS tooling when using the setup-profiles command to manage your <code>~/.aws/config</code> file.</p>"},{"location":"commands/#managed-variables","title":"Managed Variables","text":"<p>The following AWS environment variables are automatically set by <code>aws-sso</code>:</p> <ul> <li><code>AWS_ACCESS_KEY_ID</code> -- Authentication identifier required by AWS</li> <li><code>AWS_SECRET_ACCESS_KEY</code> -- Authentication secret required by AWS</li> <li><code>AWS_SESSION_TOKEN</code> -- Authentication secret required by AWS</li> <li><code>AWS_DEFAULT_REGION</code> -- Region to use AWS with (will never override an     existing value)</li> </ul> <p>The following environment variables are specific to <code>aws-sso</code>:</p> <ul> <li><code>AWS_SSO_ACCOUNT_ID</code> -- The AccountID for your IAM role</li> <li><code>AWS_SSO_ROLE_NAME</code> -- The name of the IAM role</li> <li><code>AWS_SSO_ROLE_ARN</code> -- The full ARN of the IAM role</li> <li><code>AWS_SSO_SESSION_EXPIRATION</code>  -- The date and time when the IAM role     credentials will expire in RFC3339 format</li> <li><code>AWS_SSO_DEFAULT_REGION</code> -- Tracking variable for <code>AWS_DEFAULT_REGION</code></li> <li><code>AWS_SSO_PROFILE</code> -- User customizable varible using the     ProfileFormat template</li> <li><code>AWS_SSO</code> -- AWS SSO instance name</li> </ul> <p>Note: AWS SSO does NOT set <code>$AWS_PROFILE</code> to avoid problems with the AWS tooling and SDK.</p>"},{"location":"commands/#shell-helpers","title":"Shell Helpers","text":"<p>These are optional helper functions installed in your shell as part of the setup-completions command.  To install these helper functions, please see the quickstart page.</p> <p>Important: Unlike the commands above, these are standalone shell functions and you should NOT prefix them with <code>aws-sso</code>.</p> <p>By default, these commands uses your default AWS SSO instance, but you can override this by first exporting <code>AWS_SSO</code> to the value you want to use.</p> <p>If you want to pass specific args to <code>aws-sso-profile</code> you can use the <code>$AWS_SSO_HELPER_ARGS</code> environment variable.  If nothing is set, then <code>--level error</code> is used.</p> <p>Currently the following shells are supported:</p> <ul> <li>bash</li> <li>zsh</li> <li>fish</li> </ul> <p>Note: <code>zsh</code> completion requires you to have the following lines set before the AWS SSO completions:</p> <pre><code>autoload -Uz +X compinit &amp;&amp; compinit\nautoload -Uz +X bashcompinit &amp;&amp; bashcompinit\n</code></pre> <p>Note: Please reach out if you can help with adding support for your favorite shell!</p>"},{"location":"commands/#aws-sso-profile","title":"aws-sso-profile","text":"<p>This shell command enables you to assume an AWS SSO role by the profile name in the current shell and with auto-complete functionality.  Basically it is a wrapper around <code>eval $(aws-sso eval --profile XXXX)</code> but with auto-complete.</p> <p>This command will export the same environment variables as the eval command.</p> <p>Note: This command will overwrite existing environment variables, but will refuse to run if <code>AWS_PROFILE</code> is set.</p>"},{"location":"commands/#aws-sso-clear","title":"aws-sso-clear","text":"<p>Clears all the managed environment variables in your current shell set by <code>aws-sso-profile</code> or by running <code>eval $(aws-sso env ...)</code>.</p>"},{"location":"commit-sign-key.asc/","title":"Commit Signing Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: GPGTools - http://gpgtools.org\n\n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\nAAAmAAABnHpoVFcAAAAmAAABnHZpVk4AAAAmAAABnHNrU0sAAAAmAAABnHpoQ04A\nAAAmAAABnHJ1UlUAAAAmAAABnGZyRlIAAAAmAAABnG1zAAAAAAAmAAABnGNhRVMA\nAAAmAAABnHRoVEgAAAAmAAABnGRlREUAAAAmAAABnGVuVVMAAAAmAAABnHB0QlIA\nAAAmAAABnHBsUEwAAAAmAAABnGVsR1IAAAAmAAABnHN2U0UAAAAmAAABnHRyVFIA\nAAAmAAABnGphSlAAAAAmAAABnHB0UFQAAAAmAAABnABUAGgAdQBuAGQAZQByAGIA\nbwBsAHQAIABEAGkAcwBwAGwAYQB5AAB0ZXh0AAAAAENvcHlyaWdodCBBcHBsZSBJ\nbmMuLCAyMDE0AABYWVogAAAAAAAA8xYAAQAAAAEWylhZWiAAAAAAAABxwAAAOYoA\nAAFnWFlaIAAAAAAAAGEjAAC55gAAE/ZYWVogAAAAAAAAI/IAAAyQAAC90GN1cnYA\nAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANgA7AEAARQBKAE8AVABZAF4A\nYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCjAKgArQCyALcAvADBAMYAywDQANUA\n2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcB\nbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYC\nLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYD\nIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsE\nSARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF\npgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysH\nPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJ\nEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL\nIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoN\ndA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQ\nCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS\n4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAW\nAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZ\naxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUd\nHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAh\nHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTgl\naCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAq\nAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu\n7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0\nKzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85\nvDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/\noj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF\n3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpM\ncky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT\nX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZa\nplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfVi\nSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq\nSGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwckty\npnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7\nY3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2E\ngITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN\n/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX\n4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobai\nJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys\n0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i3\n4LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvD\nWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbP\nN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvb\ngNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56no\nMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1\nUPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf//cGFyYQAAAAAA\nAwAAAAJmZgAA8qcAAA1ZAAAT0AAACg52Y2d0AAAAAAAAAAEAAQAAAAAAAAABAAAA\nAQAAAAAAAAABAAAAAQAAAAAAAAABAABuZGluAAAAAAAAADYAAKdAAABVgAAATMAA\nAJ7AAAAlgAAADMAAAFAAAABUQAACMzMAAjMzAAIzMwAAAAAAAAAAc2YzMgAAAAAA\nAQxyAAAF+P//8x0AAAe6AAD9cv//+53///2kAAAD2QAAwHFtbW9kAAAAAAAABhAA\nAJInFzAJls65lQAAAAAAAAAAAAAAAAAAAAAA/+EAgEV4aWYAAE1NACoAAAAIAAUB\nEgADAAAAAQABAAABGgAFAAAAAQAAAEoBGwAFAAAAAQAAAFIBKAADAAAAAQACAACH\naQAEAAAAAQAAAFoAAAAAAAAASAAAAAEAAABIAAAAAQACoAIABAAAAAEAAAC9oAMA\nBAAAAAEAAADeAAAAAP/hAblodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADx4\nOnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBD\nb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3Lncz\nLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNj\ncmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6ZGM9Imh0dHA6\nLy9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIj4KICAgICAgICAgPGRjOnN1Ympl\nY3Q+CiAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICA8cmRmOmxp\nPlBob3RvIEJvb3RoPC9yZGY6bGk+CiAgICAgICAgICAgIDwvcmRmOkJhZz4KICAg\nICAgICAgPC9kYzpzdWJqZWN0PgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAg\nPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K/9sAQwAgFhgcGBQgHBocJCIgJjBQNDAs\nLDBiRko6UHRmenhyZnBugJC4nICIropucKDaoq6+xM7Qznya4vLgyPC4ys7G/9sA\nQwEiJCQwKjBeNDRexoRwhMbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbG\nxsbGxsbGxsbGxsbGxsbGxsbG/8AAEQgA3gC9AwEiAAIRAQMRAf/EAB8AAAEFAQEB\nAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE\nEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2\nNzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SV\nlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn\n6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//E\n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\nOrVJxYghO+1Id+H8dPo5FcHPMyg=\n=byig\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"config/","title":"Configuration","text":"<p>By default, <code>aws-sso</code> will by default store all it's configuration and state files in <code>~/.config/aws-sso</code> for versions <code>&gt;= 1.17.0</code> per the XDG spec. Previous versions of <code>aws-sso</code> used <code>~/.aws-sso</code>.  Users at their own descresion may move the files to the new location.  To keep files co-located in the same place, if the directory <code>~/.aws-sso</code> exists, then it will be used.</p> <p>Note: The <code>aws-sso</code> documentation will generally use the older file path (<code>~/.aws-sso/...</code>) when describing file locations.</p> <p>The main configuration file is named <code>~/.aws-sso/config.yaml</code>, but this can be overridden by setting <code>$AWS_SSO_CONFIG</code> in your shell or via the <code>--config</code> flag.</p> <p>The first time you run <code>aws-sso</code> and it detects there is no configuration file, it will prompt you for a number of questions to give you a basic configuration. Afterwords, you can edit the file and adjust the settings as desired or run aws-sso config.</p> <pre><code>SSOConfig:\n    &lt;Name of AWS SSO&gt;:\n        SSORegion: &lt;AWS Region where AWS SSO is deployed&gt;\n        StartUrl: &lt;URL for AWS SSO Portal&gt;\n        DefaultRegion: &lt;AWS_DEFAULT_REGION&gt;\n        AuthUrlAction: [clip|exec|print|printurl|open|granted-containers|open-url-in-container]\n        Accounts:  # optional block for specifying tags &amp; overrides\n            &lt;AccountId&gt;:\n                Name: &lt;Friendly Name of Account&gt;\n                DefaultRegion: &lt;AWS_DEFAULT_REGION&gt;\n                Tags:  # tags for all roles in the account\n                    &lt;Key1&gt;: &lt;Value1&gt;\n                    &lt;Key2&gt;: &lt;Value2&gt;\n                Roles:\n                    &lt;Role Name&gt;:\n                        Profile: &lt;ProfileName&gt;\n                        DefaultRegion: &lt;AWS_DEFAULT_REGION&gt;\n                        Tags:  # tags specific for this role (will override account level tags)\n                            &lt;Key1&gt;: &lt;Value1&gt;\n                            &lt;Key2&gt;: &lt;Value2&gt;\n                        Via: &lt;Previous Role&gt;  # optional, for role chaining\n                        SourceIdentity: &lt;Source Identity&gt;\n\n# See description below for these options\nDefaultRegion: &lt;AWS_DEFAULT_REGION&gt;\nDefaultSSO: &lt;name of AWS SSO&gt;\nCacheRefresh: &lt;hours&gt;\nAutoConfigCheck: [false|true]\nAutoLogin: [false|true]\nThreads: &lt;integer&gt;\nMaxRetry: &lt;integer&gt;\nMaxBackoff: &lt;integer&gt;\n\nBrowser: &lt;path to web browser&gt;\nUrlAction: [clip|exec|print|printurl|open|granted-containers|open-url-in-container]\nConfigProfilesBinaryPath: &lt;path to aws-sso binary&gt;\nUrlExecCommand:\n    - &lt;command&gt;\n    - &lt;arg 1&gt;\n    - &lt;arg N&gt;\n    - \"%s\"\nConsoleDuration: &lt;minutes&gt;\n\nLogLevel: [error|warn|info|debug|trace]\nLogLines: [true|false]\nHistoryLimit: &lt;integer&gt;\nHistoryMinutes: &lt;integer&gt;\n\nSecureStore: [file|keychain|kwallet|pass|secret-service|wincred|json]\nJsonStore: &lt;path to json file&gt;\n\nProfileFormat: \"&lt;template&gt;\"\nConfigVariables:\n    &lt;Var1&gt;: &lt;Value1&gt;\n    &lt;Var2&gt;: &lt;Value2&gt;\n    &lt;VarN&gt;: &lt;ValueN&gt;\n\nFirstTag: &lt;Tag Name&gt;\nFullTextSearch: [true|false]\nAccountPrimaryTag:\n    - &lt;tag 1&gt;\n    - &lt;tag 2&gt;\n    - &lt;tag N&gt;\nPromptColors:\n    &lt;Option 1&gt;: &lt;Color&gt;\n    &lt;Option 2&gt;: &lt;Color&gt;\n    &lt;Option N&gt;: &lt;Color&gt;\nListFields:\n    - &lt;field 1&gt;\n    - &lt;field 2&gt;\n    - &lt;field N&gt;\nEnvVarTags:\n    - &lt;Tag1&gt;\n    - &lt;Tag2&gt;\n    - &lt;TagN&gt;\n</code></pre>"},{"location":"config/#ssoconfig","title":"SSOConfig","text":"<p>This is the top level block for your AWS SSO instances.  Typically an organization will have a single AWS SSO instance for all of their accounts under a single AWS master payer account.  If you have more than one AWS SSO instance, then <code>Default</code> will be the default unless overridden with <code>DefaultSSO</code>.</p> <p>The <code>SSOConfig</code> config block is required.</p>"},{"location":"config/#starturl","title":"StartUrl","text":"<p>Each AWS SSO instance start URL hosted by AWS for interacting with your SSO provider (Okta/OneLogin/etc).  Should be in the format of <code>https://xxxxxxx.awsapps.com/start</code>.</p> <p>Note: If you need to authenticate as different users to the same AWS SSO Instance, you can specify multiple SSOConfig blocks with the same <code>StartUrl</code>.</p> <p>The <code>StartUrl</code> is required.</p>"},{"location":"config/#ssoregion","title":"SSORegion","text":"<p>Each AWS SSO instance is configured in a specific AWS region which needs to be set here.</p> <p>The <code>SSORegion</code> is required.</p>"},{"location":"config/#defaultregion","title":"DefaultRegion","text":"<p>The <code>DefaultRegion</code> allows you to define a value for the <code>$AWS_DEFAULT_REGION</code> when switching to a role.  Note that, aws-sso will NEVER change an existing <code>$AWS_DEFAULT_REGION</code> set by the user.</p> <p><code>DefaultRegion</code> can be specified at the following levels and the first match is selected (most specific to most generic):</p> <ol> <li>At the inidividual role level: <code>SSOConfig -&gt; &lt;AWS SSO Instance&gt; -&gt; Accounts -&gt; &lt;AccountId&gt; -&gt; Roles -&gt; &lt;RoleName&gt;</code></li> <li>At the AWS Account level:<code>SSOConfig -&gt; &lt;Name of the AWS SSO&gt; -&gt; Accounts -&gt; &lt;AccountId&gt;</code></li> <li>At the AWS SSO Instance level: <code>SSOConfig -&gt; &lt;AWS SSO Instance&gt;</code></li> <li>At the config file level (default is <code>us-east-1</code>)</li> </ol>"},{"location":"config/#accounts","title":"Accounts","text":"<p>The <code>Accounts</code> block is completely optional!  The only purpose of this block is to allow you to add additional tags (key/value pairs) to your accounts/roles to make them easier to select.</p>"},{"location":"config/#name","title":"Name","text":"<p>Alternate name of the account.  Shown as <code>AccountName</code> for the list command. Not to be confused with the <code>AccountAlias</code> which is defined by the account owner in AWS.  For more information, read the FAQ</p>"},{"location":"config/#tags","title":"Tags","text":"<p>List of key / value pairs, used by <code>aws-sso</code> in prompt mode.  Any tag placed at the account level will be applied to all roles in that account.</p> <p>Some special tags:</p> <ul> <li>Color -- Used to specify the color of the Firefox container label.  Valid values are:</li> <li>blue</li> <li>turquoise</li> <li>green</li> <li>yellow</li> <li>orange</li> <li>red</li> <li>pink</li> <li>purple</li> <li>Icon -- Used to specify the icon of the Firefox container label.  Valid values are:</li> <li>fingerprint</li> <li>briefcase</li> <li>dollar</li> <li>cart</li> <li>gift</li> <li>vacation</li> <li>food</li> <li>fruit</li> <li>pet</li> <li>tree</li> <li>chill</li> <li>circle</li> </ul>"},{"location":"config/#roles","title":"Roles","text":"<p>The <code>Roles</code> block is optional, except for roles you which to assume via role chaining.</p>"},{"location":"config/#profile","title":"Profile","text":"<p>Define a custom <code>$AWS_PROFILE</code> / <code>$AWS_SSO_PROFILE</code> value for this role which overrides the ProfileFormat config option.</p> <p>Roles, just like Accounts also accept Tags which are specific to that role and override any account level tags.</p>"},{"location":"config/#via","title":"Via","text":"<p>Implements the concept of role chaining.</p> <p><code>Via</code> defines which role to assume before calling sts:AssumeRole in order to switch to the specified role.  This allows you to define and assume roles in AWS accounts that are not included in your organization's AWS SSO scope or roles that were not defined via an AWS SSO Permission Set.</p>"},{"location":"config/#sourceidentity","title":"SourceIdentity","text":"<p>An optional string which must not start with <code>aws:</code> that your administrator may require you to set in order to assume a role with <code>Via</code>.</p>"},{"location":"config/#common-config-options","title":"Common Config Options","text":""},{"location":"config/#defaultsso","title":"DefaultSSO","text":"<p>If you only have a single AWS SSO instance, then it doesn't really matter what you call it, but if you have two or more, than <code>Default</code> is automatically selected unless you manually specify it here, on the CLI (<code>--sso</code>), or via the <code>AWS_SSO</code> environment variable.</p>"},{"location":"config/#sso-cache-options","title":"SSO Cache Options","text":""},{"location":"config/#cacherefresh","title":"CacheRefresh","text":"<p>This is the number of hours between automatically refreshing your AWS SSO cache to detect any changes in the roles you have been granted access to.  The default is 168 (7 days).  Disable this feature by setting to any value &lt;= 0.</p> <p>Note: If this feature is disabled, then AutoConfigCheck is also disabled.</p>"},{"location":"config/#threads","title":"Threads","text":"<p>Certain actions when communicating with AWS can be accellerated by running multiple parallel threads.  Must be &gt;= 1.  Default is 5 threads.  Note that too many threads can actually hurt performance for large number of accounts!</p>"},{"location":"config/#maxretry","title":"MaxRetry","text":"<p>Maximum number of attempts before aborting.  Default is 10 which seems optimal for &lt;= 50 accounts.  Value must be &gt; 0.</p>"},{"location":"config/#maxbackoff","title":"MaxBackoff","text":"<p>Maximum number of seconds to wait before retrying.  Too low of a value will cause retries to fail more often.  Too high of a value will hurt performance.  Default is 5 seconds which seems optional for &lt;= 50 accounts. Value must be &gt; 0.</p>"},{"location":"config/#browser-integration","title":"Browser Integration","text":""},{"location":"config/#authurlaction-browser-urlaction-urlexeccommand","title":"AuthUrlAction / Browser / UrlAction / UrlExecCommand","text":"<p><code>UrlAction</code> gives you control over how AWS SSO and AWS Console URLs are opened in a browser:</p> <ul> <li><code>clip</code> -- Copies the URL to your clipboard</li> <li><code>exec</code> -- Execute the command provided in <code>UrlExecCommand</code></li> <li><code>granted-containers</code>  -- Generates a URL for the Firefox     Granted Containers plugin and     runs your <code>UrlExecCommand</code></li> <li><code>open</code> -- Opens the URL in your default browser or the browser you specified     via <code>--browser</code> or <code>Browser</code></li> <li><code>open-url-in-container</code> -- Generates a URL for the Firefox Open Url in Container     plugin and runs your <code>UrlExecCommand</code>.</li> <li><code>print</code> -- Prints the URL with a message in your terminal to stderr</li> <li><code>printurl</code> -- Prints only the URL in your terminal to stderr</li> </ul> <p>If <code>Browser</code> is not set, then your default browser will be used and that browser needs to support JavaScript for the AWS SSO user interface.</p> <p><code>UrlExecCommand</code> is used with <code>UrlAction: exec</code> and the two Firefox containers plugin options (<code>granted-containers</code> / <code>open-url-in-container</code>) and allows you to execute arbitrary commands to handle the URL.  The command and arguments should be specified as a list, with the URL to open specified as the format string <code>%s</code>. Only one instance of <code>%s</code> is allowed.  Note that YAML requires quotes around strings which start with a reserved indicator like <code>%</code>.</p> <p><code>AuthUrlAction</code> allows you to override the global <code>UrlAction</code> when authenticating with your SSO provider to retrieve an AWS SSO token.</p> <p>Examples:</p>"},{"location":"config/#open-url-in-default-browser","title":"Open URL In Default Browser","text":"<pre><code>UrlAction: open\n</code></pre>"},{"location":"config/#open-url-in-non-default-browser","title":"Open URL In Non-Default Browser","text":"<pre><code>UrlAction: exec\nUrlExecCommand:\n    - open\n    - -a\n    - /Applications/Brave Browser.app\n    - --args\n    - \"%s\"\n</code></pre>"},{"location":"config/#open-url-in-firefox-container","title":"Open URL in Firefox Container","text":"<p>Opens each IAM Role (and SSO Login page) in a unique Firefox Container using the Open Url in Container Firefox plugin.</p> <pre><code>UrlAction: open-url-in-container\nUrlExecCommand:\n    - /Applications/Firefox.app/Contents/MacOS/firefox\n    - \"%s\"\n</code></pre> <p>Note: If you do not want your SSO Login page to be opened in a container, use the AuthUrlAction option to specify a different action:</p> <pre><code>SSOConfig:\n    Default:\n        SSORegion: us-east-1\n        StartUrl: https://example.awsapps.com/start\n        AuthUrlAction: open\nUrlAction: open-url-in-container\nUrlExecCommand:\n    - /Applications/Firefox.app/Contents/MacOS/firefox\n    - \"%s\"\n</code></pre>"},{"location":"config/#use-custom-shell-script","title":"Use custom shell script","text":"<pre><code>UrlAction: exec\nUrlExecCommand:\n    - ~/bin/open_url.sh\n    - \"%s\"\n</code></pre> <p>Note: If your <code>ProfileFormat</code> generates a ProfileName with an <code>&amp;</code>, then <code>{{ .AccountId }}:{{ .RoleName }}</code> will be used as the Firefox container name instead.</p> <p>Note: You can control the color and icon of the Firefox container label using Tags.</p> <p>Note for MacOS users: This feature does not work with the bundle directory, so you should specify <code>/Applications/Firefox.app/Contents/MacOS/firefox</code> (or as appropriate) as the command to execute.</p>"},{"location":"config/#consoleduration","title":"ConsoleDuration","text":"<p>Number of minutes an AWS Console session is valid for (default 60).  If you wish to override the default session duration, you can specify the number of minutes here or with the <code>--duration</code> flag.</p> <p>Note that even though AWS documents the API call to get a Console URL to be between 15 minutes and 36 hours, the real limit is 12 hours (720 minutes) because AWS SSO sessions are limited to 12 hours maximum.</p>"},{"location":"config/#aws_profile-integration","title":"AWS_PROFILE Integration","text":""},{"location":"config/#configprofilesbinarypath","title":"ConfigProfilesBinaryPath","text":"<p>Override execution path for <code>aws-sso</code> when generating named AWS profiles via the config-profiles.</p>"},{"location":"config/#profileformat","title":"ProfileFormat","text":"<p>AWS SSO CLI can set an environment variable named <code>AWS_SSO_PROFILE</code> with any value you can express using a Go Template which can be useful for modifying your shell prompt and integrate with your own tooling.</p> <p>The following variables are accessible from the <code>AWSRoleFlat</code> struct:</p> <ul> <li><code>Id</code> -- Unique integer defined by AWS SSO CLI for this role</li> <li><code>AccountId</code> -- AWS Account ID (int64! not zero padded)</li> <li><code>AccountIdPad</code> -- AWS Account ID (zero padded)</li> <li><code>AccountAlias</code> -- AWS Account Name defined in AWS by the account owner</li> <li><code>AccountName</code> -- AWS Account Name defined in <code>~/.aws-sso/config.yaml</code></li> <li><code>EmailAddress</code> -- Root account email address associated with the account in AWS</li> <li><code>ExpiresEpoch</code> -- When your API credentials expire (UNIX epoch)</li> <li><code>Expires</code> -- When your API credentials expire (string)</li> <li><code>Arn</code> -- AWS ARN for this role</li> <li><code>RoleName</code> -- The role name</li> <li><code>DefaultRegion</code> -- The manually configured default region for this role</li> <li><code>SSO</code> -- Name of the AWS SSO instance</li> <li><code>SSORegion</code> -- The AWS Region where AWS SSO is enabled in your account</li> <li><code>StartUrl</code> -- The AWS SSO start URL for your account</li> <li><code>Tags</code> -- Map of additional custom key/value pairs</li> <li><code>Via</code> -- Role AWS SSO CLI will assume before assuming this role</li> </ul> <p>By default, <code>ProfileFormat</code> is set to <code>{{ .AccountIdPad }}:{{ .RoleName }}</code>.</p> <p>AWS SSO CLI uses sprig for most of its functions, but a few custom functions are available:</p> <ul> <li><code>AccountIdStr(x)</code> -- Converts the <code>.AccountId</code> variable to a string.  Deprecated.  Use <code>.AccountIdPad</code> variable instead.</li> <li><code>EmptyString(x)</code> -- Returns true/false if the value <code>x</code> is an empty string</li> <li><code>FirstItem([]x)</code> -- Returns the first item in a list that is not an empty string</li> <li><code>StringsJoin(x, []y)</code> -- Joins the items in <code>y</code> with the string <code>x</code></li> </ul> <p>Note: Unlike most values stored in the <code>config.yaml</code>,  you will need to single-quote (<code>'</code>) the value because because <code>ProfileFormat</code> values often start with a <code>{</code>.</p> <p>For more information, see the FAQ.</p>"},{"location":"config/#configvariables","title":"ConfigVariables","text":"<p>Define a set of config settings for each profile in your <code>~/.aws/config</code> file generated via the config-profiles command.</p> <p>Some examples to consider:</p> <ul> <li><code>sts_regional_endpoints: regional</code></li> <li><code>output: json</code></li> </ul>"},{"location":"config/#interactive-role-selection","title":"Interactive Role Selection","text":""},{"location":"config/#firsttag","title":"FirstTag","text":"<p>When selecting a role, the tag key name at the top of the list will be this value regardless of sort order.  Useful if you want <code>History</code> or some other tag easily accessible via arrow keys.</p>"},{"location":"config/#fulltextsearch","title":"FullTextSearch","text":"<p>When set to <code>true</code>, searching via interactive exec mode (<code>aws-sso exec</code> without role selector args) will cause searching to be done via substrings rather than the default prefix based search.</p>"},{"location":"config/#accountprimarytag","title":"AccountPrimaryTag","text":"<p>When selecting a role, if you first select by role name (via the <code>Role</code> tag) you will be presented with a list of matching ARNs to select. The <code>AccountPrimaryTag</code> automatically includes another tag name and value as the description to aid in role selection.  By default the following tags are searched (first match is used):</p> <ul> <li><code>AccountName</code></li> <li><code>AccountAlias</code></li> <li><code>Email</code></li> </ul> <p>Set <code>AccountPrimaryTag</code> to an empty list to disable this feature.</p>"},{"location":"config/#promptcolors","title":"PromptColors","text":"<p><code>PromptColors</code> takes a map of prompt options and color options allowing you to have complete control of how AWS SSO CLI looks.  You only need to specify the options you wish to override, but do not include the <code>PromptColors</code> if you have no options.  More information about the meaning and use of the options below, refer to the go-prompt docs.</p> <p>Valid options:</p> <ul> <li><code>DescriptionBGColor</code></li> <li><code>DescriptionTextColor</code></li> <li><code>InputBGColor</code></li> <li><code>InputTextColor</code></li> <li><code>PrefixBackgroundColor</code></li> <li><code>PrefixTextColor</code></li> <li><code>PreviewSuggestionBGColor</code></li> <li><code>PreviewSuggestionTextColor</code></li> <li><code>ScrollbarBGColor</code></li> <li><code>ScrollbarThumbColor</code></li> <li><code>SelectedDescriptionBGColor</code></li> <li><code>SelectedDescriptionTextColor</code></li> <li><code>SelectedSuggestionBGColor</code></li> <li><code>SelectedSuggestionTextColor</code></li> <li><code>SuggestionBGColor</code></li> <li><code>SuggestionTextColor</code></li> </ul> <p>Valid low intensity colors:</p> <ul> <li><code>Black</code></li> <li><code>DarkRed</code></li> <li><code>DarkGreen</code></li> <li><code>Brown</code></li> <li><code>DarkBlue</code></li> <li><code>Purple</code></li> <li><code>Cyan</code></li> <li><code>LightGrey</code></li> </ul> <p>Valid high intensity colors:</p> <ul> <li><code>DarkGrey</code></li> <li><code>Red</code></li> <li><code>Green</code></li> <li><code>Yellow</code></li> <li><code>Blue</code></li> <li><code>Fuchsia</code></li> <li><code>Turquoise</code></li> <li><code>White</code></li> </ul>"},{"location":"config/#historylimit","title":"HistoryLimit","text":"<p>Limits the number of recently used roles tracked via the History tag. Default is last 10 unique roles.  Set to 0 to disable.</p>"},{"location":"config/#historyminutes","title":"HistoryMinutes","text":"<p>Limits the list of recently used roles tracked via the History tag to roles that were last used within the last X minutes.  Set to 0 to not limit based on the time.  Default is 1440 minutes (24 hours).</p> <p>This option has no effect if <code>HistoryLimit</code> is set to 0.</p>"},{"location":"config/#advanced-configuration-options","title":"Advanced Configuration Options","text":""},{"location":"config/#listfields","title":"ListFields","text":"<p>Specify which fields to display via the <code>list</code> command.  Valid options are:</p> <ul> <li><code>Id</code> -- Unique row identifier</li> <li><code>AccountAlias</code> -- Account Name in AWS as defined by the account owner</li> <li><code>AccountId</code> -- AWS Account Id</li> <li><code>AccountIdPad</code> -- AWS Account Id with leading zeros if necessary</li> <li><code>AccountName</code> -- Account Name from config.yaml</li> <li><code>Arn</code> -- Role ARN</li> <li><code>DefaultRegion</code> -- Configured default region</li> <li><code>EmailAddress</code> -- Email address of root account associated with AWS Account</li> <li><code>ExpiresEpoch</code> -- Unix epoch time when cached STS creds expire</li> <li><code>Expires</code> -- Hours and minutes until cached STS creds expire</li> <li><code>Profile</code> -- Value used for <code>$AWS_SSO_PROFILE</code> and the profile name in <code>~/.aws/config</code></li> <li><code>RoleName</code> -- Role name</li> <li><code>SSO</code> -- AWS SSO instance name</li> <li><code>Via</code> -- Role Chain Via</li> </ul>"},{"location":"config/#autoconfigcheck","title":"AutoConfigCheck","text":"<p>When set to <code>true</code>, when your AWS SSO roles are automatically refreshed (see CacheRefresh) <code>aws-sso</code> will also check to see if any changes are warranted in your <code>~/.aws/config</code>.</p> <p>Note: This option can be disabled temporarily on the command line by passing the <code>--no-config-check</code> flag.</p> <p>Note: If you are using a non-default path for your <code>~/.aws/config</code> file, then you must be sure to set the <code>AWS_CONFIG_FILE</code> environment variable to the correct path or disable this configuration option.</p>"},{"location":"config/#autologin","title":"AutoLogin","text":"<p>When set to <code>true</code>, <code>aws-sso</code> will behave mostly like v1.x and automatically attempt to login with your SSO provider to AWS Identity Center when your session has expired. When set to <code>false</code> (the default) you must first run aws-sso login.</p> <p>Note: This feature exists soley beacuse people don't like change.  Enabling this really isn't ideal from a security standpoint since it makes it more likely that an attempted phish attack will be successful.  Users should expect the login page to load in their browser if and only if they have manually initiated the login process.</p> <p>Note: that v2.x does not support the common --no-config-check flag that was present in 1.x.</p>"},{"location":"config/#loglevel-loglines","title":"LogLevel / LogLines","text":"<p>By default, the <code>LogLevel</code> is 'info'.  You can override it here or via <code>--log-level</code> with one of the following values:</p> <ul> <li><code>error</code></li> <li><code>warn</code></li> <li><code>info</code></li> <li><code>debug</code></li> <li><code>trace</code></li> </ul> <p><code>LogLines</code> includes the file name/line and module name with each log for advanced debugging.</p>"},{"location":"config/#securestore-jsonstore","title":"SecureStore / JsonStore","text":"<p><code>SecureStore</code> supports the following backends:</p> <ul> <li><code>file</code> - Encrypted local files (OS agnostic and default on Linux)</li> <li><code>keychain</code> - macOS Keychain (default on macOS)</li> <li><code>kwallet</code> - KDE Wallet</li> <li><code>pass</code> - pass (uses GPG on backend)</li> <li><code>secret-service</code> - Freedesktop.org Secret Service</li> <li><code>wincred</code> - Windows Credential Manager (default on Windows)</li> <li><code>json</code> - Cleartext JSON file (very insecure and not recommended).  Location     can be overridden with <code>JsonStore</code></li> </ul> <p>Note: The <code>file</code> option supports passing in the password via the <code>AWS_SSO_FILE_PASSWORD</code> environment variable.</p> <p>Note: The <code>pass</code> option supports passing in the password via the gpg-agent.</p>"},{"location":"config/#envvartags","title":"EnvVarTags","text":"<p>List of tag keys that should be set as a shell environment variable when using the <code>eval</code> or <code>exec</code> commands.</p> <p>Note: These environment variables are considered completely owned and controlled by <code>aws-sso</code> so any existing value will be overwritten.</p> <p>Note: This feature is not compatible when using roles using the <code>$AWS_PROFILE</code> via the <code>config</code> command.</p>"},{"location":"demos/","title":"AWS SSO CLI Demos","text":""},{"location":"demos/#inital-setup-via-the-wizard","title":"Inital setup via the wizard","text":"<p>Showing how to get started with AWS SSO CLI using the configuration wizard and how to use the <code>exec</code> command to select a role via the powerful interactive interface.</p> <p></p>"},{"location":"demos/#using-the-aws-sso-profile-command","title":"Using the <code>aws-sso-profile</code> command","text":"<p>The <code>aws-sso-profile</code> shell integration is the easiest way to source the necessary AWS API credentials into your current shell.</p> <p></p>"},{"location":"demos/#using-the-config-profiles-command-and-aws_profile","title":"Using the <code>config-profiles</code> command and <code>$AWS_PROFILE</code>","text":"<p>Do you want to just use the <code>$AWS_PROFILE</code> environment variable?  Well, AWS SSO CLI supports that too!  This demo shows you how to set it up and use it.</p> <p></p>"},{"location":"demos/#using-the-console-command","title":"Using the <code>console</code> command","text":"<p>The <code>console</code> command allows you to open the AWS Console in your browser for a given AWS SSO role.  If you have enabled FirefoxOpenUrlInContainer then multiple active sessions are possible as shown here:</p> <p></p>"},{"location":"ecs-api/","title":"ECS Server REST API","text":"<p>If you have defined a bearer token then all REST calls must define the necesary HTTP Authentication header.</p> <p>If you have enabled SSL then all REST calls must be over SSL/TLS.</p>"},{"location":"ecs-api/#default-slot-aws-iam-role-credentials","title":"Default slot AWS IAM Role credentials","text":""},{"location":"ecs-api/#get","title":"GET /","text":"<p>Fetch the default IAM credentials.</p> <p>Reply:</p> <pre><code>{\n    \"AccessKeyId\": \"ASI....\",\n    \"SecretAccessKeyId\": \"&lt;Secret Access Key ID&gt;\",\n    \"Token\": \"&lt;Temprorary security token&gt;\",\n    \"Expiration\": \"&lt;Date in RFC3339 / ISO8601 format&gt;\",\n    \"RoleArn\": \"&lt;ARN of the role&gt;\",\n}\n</code></pre>"},{"location":"ecs-api/#get-profile","title":"GET /profile","text":"<p>Fetch the profile name of the default credentials.</p> <p>Reply:</p> <pre><code>{\n    \"ProfileName\": \"&lt;aws-sso profile name&gt;\",\n    \"AccountId\": \"&lt;AWS Account ID&gt;\",\n    \"RoleName\": \"&lt;IAM Role name&gt;\",\n    \"Expiration\": &lt;Unix epoch seconds&gt;,\n    \"Expires\": \"&lt;how long until expires string&gt;\"\n}\n</code></pre>"},{"location":"ecs-api/#put","title":"PUT /","text":"<p>Upload default credentials.</p> <p>Request:</p> <pre><code>{\n    \"ProfileName\": \"&lt;aws-sso profile name\",\n    \"Creds\": {\n        \"accountId\": \"&lt;AWS AccountID of the role&gt;\",\n        \"roleName\": \"&lt;Name of the role&gt;\",\n        \"accessKeyId\": \"ASI....\",\n        \"secretAccessKey\": \"&lt;secret access key id value&gt;\",\n        \"sessionToken\": \"&lt;temprorary security token&gt;\",\n        \"expiration\": \"expiration Epoch in milliseconds\"\n    }\n}\n</code></pre> <p>Reply:</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-api/#delete","title":"DELETE /","text":"<p>Delete default credentials.</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-api/#slotted-credentials","title":"Slotted credentials","text":""},{"location":"ecs-api/#get-slot","title":"GET /slot","text":"<p>Fetch list of default credentials.</p> <pre><code>[\n    {\n        \"ProfileName\": \"&lt;profile name&gt;\",\n        \"AccountId\": \"&lt;AWS Account ID&gt;\",\n        \"RoleName\": \"&lt;IAM Role Name&gt;\",\n        \"Expiration\": &lt;Unix Epoch Seconds&gt;,\n        \"Expires\": \"&lt;how long until expires string&gt;\"\n    },\n    &lt;more entries...&gt;\n]\n</code></pre>"},{"location":"ecs-api/#get-slotprofile","title":"GET /slot/&lt;profile&gt;","text":"<p>Fetch credentials of the named profile.</p> <pre><code>{\n    \"AccessKeyId\": \"ASI....\",\n    \"SecretAccessKeyId\": \"&lt;secret access key id value&gt;\",\n    \"Token\": \"&lt;temprorary security token&gt;\",\n    \"Expiration\": \"&lt;date in RFC3339 / ISO8601 format&gt;\",\n    \"RoleArn\": \"&lt;ARN of the role&gt;\",\n}\n</code></pre>"},{"location":"ecs-api/#put-slotprofile","title":"PUT /slot/&lt;profile&gt;","text":"<p>Upload credentials of the named profile.</p> <p>Request:</p> <pre><code>{\n    \"ProfileName\": \"&lt;aws-sso profile name\",\n    \"Creds\": {\n        \"accountId\": \"&lt;AWS AccountID of the role&gt;\",\n        \"roleName\": \"&lt;Name of the role&gt;\",\n        \"accessKeyId\": \"ASI....\",\n        \"secretAccessKey\": \"&lt;secret access key id value&gt;\",\n        \"sessionToken\": \"&lt;temprorary security token&gt;\",\n        \"expiration\": \"expiration Epoch in milliseconds\"\n    }\n}\n</code></pre> <p>Reply:</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-api/#delete-slotprofile","title":"DELETE /slot/&lt;profile&gt;","text":"<p>Delete credentials of the named profile.</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-api/#delete-slot","title":"DELETE /slot","text":"<p>Delete all named credentials.</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-commands/","title":"ECS Commands","text":"<p>For information about the ECS Server functionality, see the ecs-server page.</p>"},{"location":"ecs-commands/#commands","title":"Commands","text":""},{"location":"ecs-commands/#setup-ecs","title":"setup ecs","text":""},{"location":"ecs-commands/#setup-ecs-auth","title":"setup ecs auth","text":"<p>Configures the HTTP Authentication BearerToken.  Once set, all future client requests to the ECS Server will need to provide the correct credentials. <code>aws-sso</code> utilizing the same SecureStore as the ECS Server will automatically provide the necessary HTTP Auth header, but other AWS clients utilizing the AWS SDK will require $AWS_CONTAINER_AUTHORIZATION_TOKEN to be set.</p> <p>Flags:</p> <ul> <li><code>--bearer-token</code> -- Specify the bearer token secret.</li> <li><code>--delete</code> -- Delete the bearer token and disable authentication.</li> </ul>"},{"location":"ecs-commands/#setup-ecs-ssl","title":"setup ecs ssl","text":"<p>Configures the SSL Certificate and Private Key to enable SSL/TLS.  Saves the  SSL certificate and private key to the SecureStore.</p> <p>Note: At this time, this feature is not recommended due to a bug  in the AWS SDK.</p> <p>Flags:</p> <ul> <li><code>--delete</code> -- Disables SSL and deletes both the SSL certificate and private key from the Secure Store</li> <li><code>--print</code> -- Prints the SSL certificate</li> <li><code>--certificate</code> -- Path to SSL certificate file in PEM format</li> <li><code>--private-key</code> -- Path to SSL private key in PEM format</li> </ul>"},{"location":"ecs-commands/#ecs-docker-start","title":"ecs docker start","text":"<p>Starts the ECS Server in a Docker container.</p> <p>Flags:</p> <ul> <li><code>--disable-auth</code> -- Disables HTTP Auth, even if a bearer token is available</li> <li><code>--disable-ssl</code> -- Disables SSL/TLS, even if a certificate and private key are available.</li> <li><code>--bind-ip</code> -- IP address to bind the service to.  (default 127.0.0.1)</li> <li><code>--port</code> -- Port to listen on.  (default 4144)</li> <li><code>--image</code> -- Docker image to use.  (default <code>synfinatic/aws-sso-cli-ecs-version</code>)</li> <li><code>--version</code> -- Version of the docker image to use (default matches <code>aws-sso</code> binary version)</li> </ul>"},{"location":"ecs-commands/#ecs-docker-stop","title":"ecs docker stop","text":"<p>Stops the ECS Server Docker container.</p>"},{"location":"ecs-commands/#ecs-list","title":"ecs list","text":"<p>List the AWS Profiles stored in the ECS Server.</p> <p>Flags:</p> <ul> <li><code>--server</code> -- host:port of the ECS Server (default <code>localhost:4144</code>)</li> </ul>"},{"location":"ecs-commands/#ecs-load","title":"ecs load","text":"<p>Load the AWS IAM Role credentials into the ECS Server for clients to use.</p> <p>Flags:</p> <ul> <li><code>--arn &lt;arn&gt;</code>, <code>-a</code> -- ARN of role to assume (<code>$AWS_SSO_ROLE_ARN</code>)</li> <li><code>--account &lt;account&gt;</code>, <code>-A</code> -- AWS AccountID of role to assume (<code>$AWS_SSO_ACCOUNT_ID</code>)</li> <li><code>--role &lt;role&gt;</code>, <code>-R</code> -- Name of AWS Role to assume (requires <code>--account</code>) (<code>$AWS_SSO_ROLE_NAME</code>)</li> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Name of AWS Profile to assume</li> <li><code>--server</code> -- host:port of the ECS Server (default <code>localhost:4144</code>)</li> <li><code>--slotted</code> -- Load the IAM credentials into a unique slot using the ProfileName as the key</li> </ul> <p>You can provide <code>--profile</code> or <code>--arn</code> or (<code>--account</code> and <code>--role</code>) to specify the IAM role to load.</p> <p>If you do not specify <code>--slotted</code>, the role will be loaded into the default URL path at <code>/</code>.  If you would like to load multiple roles, specify <code>--slotted</code> and the role will be loaded into <code>/slot/&lt;profile name&gt;</code></p>"},{"location":"ecs-commands/#ecs-profile","title":"ecs profile","text":"<p>Fetches the ProfileName of the role stored in the default slot of the ECS Server.</p> <p>Flags:</p> <ul> <li><code>--slotted</code> -- Load the IAM credentials into a unique slot using the ProfileName as the key</li> </ul>"},{"location":"ecs-commands/#ecs-server","title":"ecs server","text":"<p>Starts the ECS Server in the foreground.</p> <p>Flags:</p> <ul> <li><code>--disable-auth</code> -- Disables HTTP Authentication, even if a Bearer Token is available</li> <li><code>--disable-ssl</code> -- Disables SSL/TLS, even if a certificate and private key are available</li> </ul>"},{"location":"ecs-commands/#ecs-unload","title":"ecs unload","text":"<p>Removes the AWS IAM Role credentials from the ECS Server and makes them unavailable to any clients to use.</p> <p>Flags:</p> <ul> <li><code>--profile &lt;profile&gt;</code>, <code>-p</code> -- Slot of AWS Profile to unload</li> <li><code>--server</code> -- host:port of the ECS Server (default <code>localhost:4144</code>)</li> </ul> <p>By default, this will unload the IAM credentials for the default role.  Passing in <code>--profile &lt;profile name&gt;</code> will unload the credentials in the named slot.</p>"},{"location":"ecs-server/","title":"Using ECS Server Mode","text":""},{"location":"ecs-server/#overview","title":"Overview","text":"<p>AWS provides the ability for ECS Tasks to assume an IAM role via an HTTP endpoint defined via the <code>AWS_CONTAINER_CREDENTIALS_FULL_URI</code> shell ENV variable.</p> <p>All AWS SDK clients using the the same ECS Server container credentials endpoint URL will utilize the same AWS IAM Role.  Note that this feature is also compatible with the HTTP Client Provider.</p> <p><code>aws-sso</code> can emulate this ECS service and allow any process to utilize one or more IAM roles backed by AWS Identity Center/SSO.</p> <p>One important distinction between <code>aws-sso</code> and this ECS Server, is that the ECS Server does not have access to the SecureStore.  The only SSO or IAM credentials it has available to it are those you manually load into it's memory.</p>"},{"location":"ecs-server/#security-considerations","title":"Security Considerations","text":"<p>The <code>aws-sso</code> ECS Server is intended to run on hosts where a single user has access. The security of your IAM credentials is dependent on nobody else being able to talk to the server. Due to a limitation of the AWS SDK, SSL/TLS is not well supported, which means that enabling HTTP Authentication may not be enough to protect your credentials.</p>"},{"location":"ecs-server/#starting-the-ecs-server","title":"Starting the ECS Server","text":"<p>The server runs in the foreground to make it easy to start via systemd and Docker.</p> <p><code>aws-sso ecs server</code></p> <p>Will start the server on <code>localhost:4144</code>.   For security purposes, the <code>aws-sso</code> ECS Server will default listen on localhost (127.0.0.1) port 4144.  You may select an alternative IP/port via the <code>--bind-ip</code> and <code>--port</code> flags.</p>"},{"location":"ecs-server/#running-the-ecs-server-in-the-background","title":"Running the ECS Server in the background","text":"<p>The recommended way to run the ECS server in the background is via the aws-sso-cli-ecs-server Docker image and the <code>aws-sso ecs docker [start|stop]</code> commands as this will automatically configure your SSL key pair and bearer token from the secure store in the most secure means possible.</p> <p>Note: For security, by default the Docker container will default listen the host's loopback interface (<code>127.0.0.1</code>), but you can enable it listening on other interfaces using the <code>--bind-ip</code> flag.</p>"},{"location":"ecs-server/#ecs-server-security","title":"ECS Server security","text":"<p>The ECS Server supports both SSL/TLS encryption as well as HTTP Authentication. Together, they allow using the <code>aws-sso</code> ECS Server on multi-user systems in a secure manner.</p> <p>Important: Failure to configure HTTP Authentication and SSL/TLS encryption risks any user on the system running the <code>aws-sso</code> ECS Server access to your AWS IAM authentication tokens.</p>"},{"location":"ecs-server/#ecs-server-ssl-certificate","title":"ECS Server SSL Certificate","text":"<p>Important: Due to a bug in the AWS SDK you can not easily enable SSL at this time.  I'd greatly appreciate people to upvote my ticket with AWS and help get it greater visibility at AWS and hopefully addressed sooner rather than later.</p> <p>You will need to create an SSL certificate which is signed by a well trusted CA such as DigiCert, Let's Encrypt, Thwate, etc.  Currently, the AWS SDK does NOT support self-signed certificates or private CA's for this endpoint.</p> <p>Once you have your certificate and private key, you will need to save them into the <code>aws-sso</code> secure store:</p> <pre><code>aws-sso setup ecs ssl --private-key localhost.key --cert-chain localhost.crt\n</code></pre> <p>Important: At this point, you should delete the private key file <code>localhost.key</code> for security.</p> <p>The <code>localhost.crt</code> file will be automatically trusted by the <code>aws-sso</code> client if it uses the same secure store so it will be able to validate the server before uploading any IAM credentials.</p> <p>If you lose your certificate, you can print it via:</p> <pre><code>aws-sso setup ecs ssl --print\n</code></pre> <p>Note: At this time, there is no way to extract the SSL Private Key from the Secure Store.</p>"},{"location":"ecs-server/#using-self-signed-certificates","title":"Using self-signed certificates","text":"<p>In theory, you can add your self-signed certificate or custom CA into the AWS SDK certificate bundle. However, this file is SDK specific (the Boto3 SDK ships with it's own <code>cacert.pem</code> while the Go v2 SDK uses the system default bundle).  Managing this is not just language specific, but likely to be site-specific so getting this to work is left as an exercise to the reader.</p>"},{"location":"ecs-server/#ecs-server-http-authentication","title":"ECS Server HTTP Authentication","text":"<p>The way to configure HTTP Authentication is with a bearer token as documented by AWS.</p> <p>Once you have selected a sufficiently secure secret to use as the bearer token, you can load it into the Secure Store via:</p> <pre><code>aws-sso setup ecs auth --bearer-token '&lt;token&gt;`\n</code></pre> <p>Note: Unlike the <code>$AWS_CONTAINER_AUTHORIZATION_TOKEN</code> variable, do not include the prefix <code>Bearer</code> in the token value.</p> <p>Important: You must choose a strong secret value for your bearer token secret!  This is what prevents anyone else from using your IAM credentials without your permission.  Your bearer token should be long and random enough to prevent bruteforce attacks.</p>"},{"location":"ecs-server/#environment-variables","title":"Environment variables","text":""},{"location":"ecs-server/#aws_container_credentials_full_uri","title":"$AWS_CONTAINER_CREDENTIALS_FULL_URI","text":"<p>AWS clients and <code>aws-sso</code> should use:</p> <p><code>export AWS_CONTAINER_CREDENTIALS_FULL_URI=http://localhost:4144/</code></p> <p>Note: If you have configured an SSL certificate as described above, use <code>https://localhost:4144</code>.</p>"},{"location":"ecs-server/#aws_container_credentials_relative_uri","title":"$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","text":"<p>It is important to not set <code>AWS_CONTAINER_CREDENTIALS_RELATIVE_URI</code> as that takes precidence for <code>AWS_CONTAINER_CREDENTIALS_FULL_URI</code> and it is not compatible with <code>aws-sso</code>.</p>"},{"location":"ecs-server/#aws_container_authorization_token","title":"$AWS_CONTAINER_AUTHORIZATION_TOKEN","text":"<p>Specify the HTTP Authentication token used to authenticate communication between the ECS Server and clients (aws-sso and AWS SDK/CLI).  Should be specified in the format of <code>Bearer &lt;auth token value&gt;</code>.</p>"},{"location":"ecs-server/#selecting-a-role-via-ecs-server","title":"Selecting a role via ECS Server","text":"<p>Before you can assume a role, you must select an IAM role for the aws-sso ecs server to present to clients.</p> <p><code>aws-sso ecs load</code></p> <p>Will start the interactive profile selector.  Or you may specify the <code>--profile</code> flag or the <code>--account</code> and <code>--role</code> flags to specify the role on the command line.</p> <p>Note: Subsequent calls to <code>aws-sso ecs load</code> will alter the current IAM Role for all AWS Client SDKs using it.</p>"},{"location":"ecs-server/#assuming-a-role-via-ecs-server","title":"Assuming a role via ECS Server","text":"<p>Ensure you have exported the following shell ENV variable:</p> <p><code>export AWS_CONTAINER_CREDENTIALS_FULL_URI=http://localhost:4144/</code></p> <p>Note: If you have configured an SSL certificate as described above, use <code>https://localhost:4144/</code>.</p> <p>Then just:</p> <p><code>aws sts get-caller-identity</code></p> <p>should show that you are using the IAM Role you loaded into the ecs server process.</p>"},{"location":"ecs-server/#determining-the-current-role","title":"Determining the current role","text":"<p>Since only one role can be loaded at any given time in the default slot, there may be times you would like to quickly determine the current role without resorting to an IAM call:</p> <p><code>aws-sso ecs profile</code></p> <p>will return the currently loaded default profile.</p>"},{"location":"ecs-server/#unloading-role-credentials","title":"Unloading role credentials","text":"<p>If you would like to remove the default IAM Role credentials:</p> <p><code>aws-sso ecs unload</code></p>"},{"location":"ecs-server/#storing-multiple-roles-at-a-time","title":"Storing multiple roles at a time","text":"<p>There may be cases where you would like to make multiple roles available at the same time without running multiple copies of the ECS server via <code>aws-sso ecs server</code>. Each role is stored in a unique named slot based on the <code>ProfileName</code> which is either set via Profile or the ProfileFormat configuration options.</p>"},{"location":"ecs-server/#loading","title":"Loading","text":"<p>Specify <code>aws-sso ecs load --slotted ...</code> and the individual role will be stored in it's unique named slot based on it's profile name.</p>"},{"location":"ecs-server/#listing-profiles","title":"Listing Profiles","text":"<p>To see a list of profiles loaded in named slots use <code>aws-sso ecs list</code>.</p>"},{"location":"ecs-server/#querying","title":"Querying","text":"<p>Accessing the individual credentials is done via the <code>profile</code> query parameter:</p> <p><code>export AWS_CONTAINER_CREDENTIALS_FULL_URI=http://localhost:4144/slot/ExampleProfileName</code></p> <p>Note: If you have configured an SSL certificate as described above, use <code>httpss://localhost:4144/slot/ExampleProfileName</code>.</p> <p>Would utilize the <code>ExampleProfileName</code> role.  Note that the <code>profile</code> value value in the URL must be URL Escaped.</p>"},{"location":"ecs-server/#unloading","title":"Unloading","text":"<p>To remove a specific IAM Role credential from a named slot in the ECS Server, you can use:</p> <p><code>aws-sso ecs unload --profile &lt;profile&gt;</code></p>"},{"location":"ecs-server/#errors","title":"Errors","text":"<p>The ECS Server API endpoint generates errors with the following JSON format:</p> <pre><code>{\n    \"code\": \"&lt;HTTP error code&gt;\",\n    \"message\": \"&lt;message&gt;\"\n}\n</code></pre>"},{"location":"ecs-server/#authentication","title":"Authentication","text":"<p>Support for the $AWS_CONTAINER_AUTHORIZATION_TOKEN environment variable is supported.</p>"},{"location":"ecs-server/#https-transport","title":"HTTPS Transport","text":"<p>HTTPS support is a work in progress.  Right now, due to a limitation with the AWS SDK only SSL certificates signed by CA that the AWS SDK trusts will work. If you think this feature would be useful to you, please leave a comment so AWS knows they should prioritize this work.</p>"},{"location":"ecs-threats/","title":"ECS Server Threat Model","text":""},{"location":"ecs-threats/#problem-description","title":"Problem Description","text":"<p>The AWS SDK supports fetching the IAM Credentials used for making calls to the AWS API the HTTP endpoint defined by the AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable.</p> <p>This connection will expose the AWS API credentials for one or more IAM Roles and should be secured as much as possible.  Unfortunately, the AWS SDK only supports public Certificates of Authority to enable users to run their own local service which impliments this API on <code>localhost</code>.</p> <p>But public CA's will not create certificates for localhost.</p>"},{"location":"ecs-threats/#solution","title":"Solution","text":"<p>In order to support <code>aws-sso</code> users who wish to run their own endpoint for <code>AWS_CONTAINER_CREDENTIALS_FULL_URI</code>, we need to create a new public web service which:</p> <p>Scenario: A user wishes to create an account</p> <ul> <li>Given: A new user who has never enabled SSL before</li> <li>When: The user chooses a unique username and password</li> <li>And: Provides a valid email address</li> <li>Then: The service creates an account for the user</li> </ul> <p>Note: I generally need to think about the onboarding workflow so this may change.</p> <p>Scenario: A user wishes to register a FQDN for a SSL certificate</p> <ul> <li>Given: A valid user who has logged in</li> <li>When: The user chooses a unique hostname for <code>aws-sso-cli.org</code></li> <li>Then: Service creates a DNS A record for hostname.aws-sso-cli.org pointing to <code>127.0.0.1</code></li> <li>And: The user runs the command locally: <code>aws-sso setup ecs cert fqdn &lt;fqdn&gt;</code></li> </ul> <p>Scenario: A user wishes to enable CSR signing for the ECS Server certificates</p> <ul> <li>Given: A valid user who has logged in</li> <li>When: The user asks for a new API Key via the web interface</li> <li>Then: Web service generates a new API key for the user</li> <li>And: The user runs the command locally <code>aws-sso setup ecs cert api-key &lt;api key&gt;</code></li> </ul> <p>Scenario: A user wishes to get a signed certificate from the web service</p> <ul> <li>Given: A valid API key for a user has been configured</li> <li>When: The user runs <code>aws-sso setup ecs cert sign-csr</code></li> <li>Then: A new private key / certificate signing request will be generated locally<ul> <li>And: The private key will be stored in the SecureStore</li> <li>And: The CSR will be uploaded to the webservice, using the configured API key for authentication</li> </ul> </li> </ul> <p>Scenario: A user has requested a signed certificate from the web service</p> <ul> <li>Given: The user has run <code>aws-sso setup ecs cert sign-csr</code></li> <li>When: The service validates the API key is assigned to the FQDN in the CSR</li> <li>Then: The service asks Let's Encrypt to sign the CSR via ACME DNS-01<ul> <li>And: Let's Encrypt signs the CSR</li> <li>And: Service returns the signed Certificate to the user.</li> </ul> </li> </ul> <p>Scenario: A user has their own CA they'd like to use to sign the certificate</p> <ul> <li>Given: The user does not wish to use the public web service to manage their certificate</li> <li>When: A user runs <code>aws-sso setup ecs cert export-csr</code></li> <li>Then: A new private key / certificate signing request will be generated locally<ul> <li>And: The private key will be stored in the SecureStore</li> <li>And: The CSR will be written to a file</li> </ul> </li> </ul> <p>Scenario: A user has signed the CSR with their own CA</p> <ul> <li>Given: The user has exported a CSR and has had it signed by a CA</li> <li>When: The user runs <code>aws-sso setup ecs cert load &lt;file&gt;</code></li> <li>Then: <code>aws-sso</code> will store the certificate for the ECS Server</li> </ul> <p>Scenario: A user wishes to use ECS Server in SSL mode</p> <ul> <li>Given: <code>aws-sso</code> has a valid private key and certificate configured</li> <li>When: The user runs the command <code>aws-sso ecs docker start</code></li> <li>Then: The ECS Server runs locally<ul> <li>And: Uses the configured SSL private key/certificate</li> <li>And: Uses the configured Bearer Token</li> </ul> </li> </ul> <p>Scenario: A user wishes to use the ECS Server in SSL mode</p> <ul> <li>Given: The user is locally running the ECS Server in SSL Mode<ul> <li>And: The user has configured a Bearer Token for the AWS SDK</li> <li>And: The user has loaded one or more AWS API credentials via <code>aws-sso ecs load ...</code></li> </ul> </li> <li>When: The user has defined <code>AWS_CREDENTIALS_FULL_URI=https://&lt;fqdn&gt;:4144</code> in the current shell</li> <li>And: The AWS SDK attempts to connect to the ECS Server via <code>127.0.0.1:4144</code> to retrive the AWS API credentials</li> <li>Then: The connection to retrieve the AWS API credentials will be e2e encrypted<ul> <li>And: The AWS SDK will use SSL to verify the identity of the ECS Server</li> <li>And: The ECS Server will use the Bearer Token to verify the identiy of the AWS SDK</li> <li>And: The ECS Server will provide the requested API credentials</li> <li>And: The AWS SDK will use the provided AWS API credentials in its request</li> </ul> </li> </ul> <p>Scenario: A user wishes to use the AWS SDK on a remote host</p> <ul> <li>Given: The user is locally running the ECS Server in SSL Mode<ul> <li>And: The user has configured a Bearer Token for the AWS SDK</li> <li>And: The user has loaded one or more AWS API credentials via <code>aws-sso ecs load ...</code></li> </ul> </li> <li>When: The user runs <code>ssh -R 4144:localhost:4144 &lt;host&gt;</code></li> <li>And: The user has defined <code>AWS_CREDENTIALS_FULL_URI=https://&lt;fqdn&gt;:4144</code> in the remote shell</li> <li>And: The AWS SDK attempts to connect to the ECS Server via <code>127.0.0.1:4144</code> to retrive the AWS API credentials</li> <li>Then: The connection will be proxied by ssh to the users local system where the ECS Server is running<ul> <li>And: The AWS SDK will use SSL to verify the identity of the ECS Server</li> <li>And: The ECS Server will use the Bearer Token to verify the identiy of the AWS SDK</li> <li>And: The ECS Server will provide the requested API credentials</li> <li>And: The AWS SDK will use the provided AWS API credentials in its request</li> </ul> </li> </ul>"},{"location":"ecs-threats/#attacks","title":"Attacks","text":""},{"location":"ecs-threats/#attacker-has-root-on-the-box-running-aws-sso-ecs-server","title":"Attacker has root on the box running aws-sso ECS Server","text":"<ul> <li>Without SSL: Game over.  Can do anything at this point.</li> <li>With SSL: same.</li> </ul>"},{"location":"ecs-threats/#attacker-has-non-root-on-the-box-running-aws-sso-ecs-server","title":"Attacker has non-root on the box running aws-sso ECS Server","text":"<ul> <li>Without SSL: If user has sufficient capabilities to inspect traffic, they can obtain the Bearer Token or AWS API credentials.</li> <li>With SSL: No attack; traffic is e2e encrypted and authenticated.</li> </ul>"},{"location":"ecs-threats/#attacker-has-root-on-the-box-running-aws-sso-client","title":"Attacker has root on the box running aws-sso client","text":"<ul> <li>Without SSL: Game over.  Can do anything at this point.</li> <li>With SSL: same.</li> </ul>"},{"location":"ecs-threats/#attacker-has-non-root-on-the-box-running-the-aws-sso-client","title":"Attacker has non-root on the box running the aws-sso client","text":"<ul> <li>Without SSL: If user has sufficient capabilities to inspect traffic, they can obtain the Bearer Token or AWS API credentials.</li> <li>With SSL: No attack; traffic is e2e encrypted and authenticated.</li> </ul>"},{"location":"ecs-threats/#attacker-has-root-on-the-box-running-aws-sdk","title":"Attacker has root on the box running AWS SDK","text":"<ul> <li>Without SSL: Game over.  Can do anything at this point.</li> <li>With SSL: same.</li> </ul>"},{"location":"ecs-threats/#attacker-has-a-non-root-account-on-the-box-running-the-aws-sdk","title":"Attacker has a non-root account on the box running the AWS SDK","text":"<ul> <li>Without SSL: Attacker can open a listener on the same port the user     runs the ssh port-forwarding.  If the user then ignores the error when they ssh     over, the attacker can get access to the Bearer Token used by the AWS SDK and     use that later on to extract AWS API credentials.</li> <li>With SSL: No attack; traffic is e2e encrypted and authenticated.</li> </ul>"},{"location":"ecs-threats/#attacker-can-posion-dns-or-etchosts","title":"Attacker can posion DNS or /etc/hosts","text":"<ul> <li>Without SSL: Attacker can MITM the connection and get access to the Bearer Token     and AWS API credentials.<ul> <li>Mitigate: aws-sso can inspect DNS to ensure IP address is correct</li> </ul> </li> <li>With SSL: Just a DoS because AWS SDK validates SSL cert before sending the Bearer Token</li> </ul>"},{"location":"ecs-threats/#attacker-can-dos-the-certificate-signing-service","title":"Attacker can DoS the certificate signing service","text":"<ul> <li>Attacker can prevent users from getting updated certificates when they expire.<ul> <li>Mitigations:<ul> <li>Consider configurable endpoints</li> <li>Use CloudFlare</li> </ul> </li> </ul> </li> </ul>"},{"location":"ecs-threats/#attacker-can-exploit-the-certificate-signing-service","title":"Attacker can exploit the certificate signing service","text":"<ul> <li>Attacker can issue their own certificate for hostname.aws-sso-cli.org</li> <li>Attacker can update DNS and point hostname.aws-sso-cli.org at a different IP than 127.0.0.1<ul> <li>Mitigate: aws-sso client can validate DNS record is valid</li> </ul> </li> <li>Attacker can inject bad data and modify the database of users</li> <li>Attacker can steal API Key of users to sign CSRs<ul> <li>Mitigate: use public key auth to mitigate</li> </ul> </li> <li>Lookup \"click jacking\" -- run Burp scanner</li> </ul>"},{"location":"ecs-threats/#suggestions","title":"Suggestions","text":"<ul> <li>Examine need for certificate revocation for users.</li> <li>Look into a private/public cert method of API Key for authentication so people can't dump my database and issue certs for anyone.</li> <li>Add extensive logging since we're low traffic and anything interesting will show up easily</li> <li>Use Burp scanner/suite to do a pen test</li> <li>Examine what free security options CloudFlare &amp; Fly.io? provide</li> </ul>"},{"location":"license/","title":"GNU General Public License","text":"<p>Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d.</p> <p>A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.</p>"},{"location":"quickstart/","title":"AWS SSO CLI Quick Start &amp; Installation Guide","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<ul> <li>Option 1: Download binary<ol> <li>Copy to appropriate location and <code>chmod 755</code></li> </ol> </li> <li>Option 2: Download RPM or DEB package<ol> <li>Use your package manager to install (Linux only)</li> </ol> </li> <li>Option 3: Build &amp; Install via Homebrew<ol> <li>Run <code>brew install aws-sso-cli</code>     Note: You no longer need to install the hombrew tap as <code>aws-sso-cli</code> is     now part of homebrew-core.</li> </ol> </li> <li>Option 4: Build from source:<ol> <li>Install GoLang v1.22+ and GNU Make</li> <li>Clone this repo</li> <li>Run <code>make</code> (or <code>gmake</code> for GNU Make)</li> <li>Your binary will be created in the <code>dist</code> directory</li> <li>Run <code>make install</code> to install in /usr/local/bin</li> </ol> </li> <li>Option 5: <code>go install</code>:<ol> <li>Install GoLang v1.22+ and GNU Make</li> <li><code>go install github.com/synfinatic/aws-sso-cli/cmd/aws-sso@latest</code></li> </ol> </li> </ul> <p>Note: macOS binaries must be build on macOS to enable Keychain support.</p>"},{"location":"quickstart/#binaries-and-code-signatures","title":"Binaries and Code Signatures","text":"<p>The release binaries and packages are not signed with keys trusted by Apple or Microsoft and may generate warnings on macOS and Windows.</p> <p>Packages and binaries are however automatically built and signed via Github Action  with my PGP code signing key.  Note that this is a different PGP key from the one I use to sign my commits.</p> <p>Users who are paranoid (think SolarWinds) are strongly encouraged to build binaries themselves.</p>"},{"location":"quickstart/#guided-configuration","title":"Guided Configuration","text":"<p>AWS SSO CLI includes a simple setup wizard to aid in a basic configuration. This wizard will automatically run the first time you run <code>aws-sso</code>.</p> <p>For more information about configuring <code>aws-sso</code> read the configuration guide.</p> <p>You can re-run through the configuration wizard at any time by running <code>aws-sso setup wizard</code>.  By default, this only does a very basic setup; for a more advanced setup, use <code>aws-sso setup wizard --advanced</code>.</p>"},{"location":"quickstart/#enabling-auto-completion-in-your-shell","title":"Enabling auto-completion in your shell","text":"<p>As of v1.9.0, <code>aws-sso</code> enhanced it's shell integration and auto-complete functionality.  The result is an improved user experience but requires a change that is not 100% backwards compatible.  Please follow the instructions below that match your sitation.</p> <p>As always, any time you modify your shell init scripts, you must restart your shell for those changes to take effect.</p>"},{"location":"quickstart/#first-time-aws-sso-users","title":"First time aws-sso users","text":"<p>Guided setup should of prompted you to install auto-completions, but you can always re-run it for a different shell:</p> <p><code>aws-sso setup completions -I</code></p> <p>or if you wish to uninstall them:</p> <p><code>aws-sso setup completions -U</code></p>"},{"location":"quickstart/#upgrading-from-after-190","title":"Upgrading from after 1.9.0","text":"<p>Upgrading from versions 1.9.0 or better is just like installing for first time users:</p> <p><code>aws-sso setup completions -I</code></p> <p>Any changes will be presented to you in diff format and you will be given the option to accept or reject the changes.</p>"},{"location":"quickstart/#more-information","title":"More information","text":"<p>More information on auto-completion can be found in the documentation for the setup completions command.</p>"},{"location":"quickstart/#use-aws-sso-on-the-cli-for-aws-api-calls","title":"Use <code>aws-sso</code> on the CLI for AWS API calls","text":"<p>There are three preferred ways of using <code>aws-sso</code> to make AWS API calls:</p> <ol> <li>Use the <code>aws-sso-profile</code> helper script for selecting profiles by name with auto-complete</li> <li>Use the exec command for the interactive search</li> <li>Use the <code>$AWS_PROFILE</code> variable</li> </ol>"},{"location":"quickstart/#aws-sso-profile-helper-script","title":"<code>aws-sso-profile</code> helper script","text":"<p>The helper script method allows you to run a command to assume an IAM role into your current shell.  This method has the advantage of supporting auto-complete of AWS Profile names and not requiring forking a new shell which can be confusing.</p> <p>Full documentation for auto-completion is available here.</p> <p>Note: Use of this feature requires enabling auto-completion as described above.</p>"},{"location":"quickstart/#usage","title":"Usage","text":"<p>The above defines two new commands, the first of which (<code>aws-sso-profile</code>) allows you to easily assume a role in your current shell with auto-complete generated AWS Profile names as defined by the ProfileFormat config variable.</p> <p>The latter (<code>aws-sso-clear</code>), clears all the environment variables installed by <code>aws-sso-profile</code>.</p> <p>If you wish to pass additional arguments to the helper script, you can set the <code>$AWS_SSO_HELPER_ARGS</code> variable.</p> <p>Pros:</p> <ul> <li>Auto-complete makes it easy to use</li> <li>Doesn't fork a new shell</li> </ul> <p>Cons:</p> <ul> <li>More complicated one-time setup</li> </ul>"},{"location":"quickstart/#using-the-exec-command","title":"Using the <code>exec</code> command","text":"<p>Use the exec command to create a new shell with the necessary AWS STS environment variables set to access AWS.</p>"},{"location":"quickstart/#usage_1","title":"Usage","text":"<p>Just run: <code>aws-sso exec</code> to create a new interactive sub-shell or <code>aws-sso exec &lt;command&gt;</code> to run a command.</p> <p>Pros:</p> <ul> <li>No shell configuration required</li> <li>Allows picking a role via CLI arguments or via the interactive search feature</li> <li>Unlike with the config/<code>$AWS_PROFILE</code> integration, it supports opening URLs     in your browser, printing or copying to your clipboard</li> <li>Allows you to quickly access any role in any account without remembering the     exact <code>$AWS_PROFILE</code> name</li> </ul> <p>Cons:</p> <ul> <li>Can be confusing when you start nesting shells inside of each other</li> </ul>"},{"location":"quickstart/#using-the-aws_profile-variable","title":"Using the <code>$AWS_PROFILE</code> variable","text":"<p>If you have existing tooling using named profiles and the <code>$AWS_PROFILE</code> environment variable, AWS SSO CLI can support that as well.</p>"},{"location":"quickstart/#configuration","title":"Configuration","text":"<p>Run: <code>aws-sso setup profiles</code></p> <p>This will add the following lines (example) to your <code>~/.aws/config</code> file:</p> <pre><code># BEGIN_AWS_SSO\n\n[profile Name1]\ncredential_process = /usr/bin/aws-sso -u &lt;open&gt; process --sso &lt;name&gt; --arn &lt;arn1&gt;\n\n[profile Name2]\ncredential_process = /usr/bin/aws-sso -u &lt;open&gt; process --sso &lt;name&gt; --arn &lt;arn2&gt;\n\n# END_AWS_SSO\n</code></pre> <p>For more information about this feature, see the following sections of the config docs:</p> <ul> <li>ProfileFormat and Profile</li> <li>AutoConfigCheck / ConfigUrlAction</li> <li>ConfigVariables</li> </ul>"},{"location":"quickstart/#usage_2","title":"Usage","text":"<p>Once your <code>~/.aws/config</code> file has been modified as described above, you can access any AWS SSO role the same way you would access a traditional role defined via AWS API keys: set the <code>$AWS_PROFILE</code> environment variable to the name of the profile.</p> <p>The only difference is that your API keys are managed via AWS SSO and always safely stored encrypted on disk!</p> <pre><code>export AWS_PROFILE=&lt;name&gt;\n</code></pre> <p>or for a single command:</p> <pre><code>AWS_PROFILE=&lt;name&gt; aws sts get-caller-identity\n</code></pre> <p>Note that every time the <code>aws</code> tool or your code makes a request for the API credentials, it is calling <code>aws-sso</code>.  The first time it does this for a role, <code>aws-sso</code> will talk to AWS STS to get some credentials and then cache the result. This may (or may not) require human inteaction to authenticate via your SSO provider.  Future calls will then use the cached STS credentials until they expire or are flushed.</p> <p>Pros:</p> <ul> <li>Don't need to learn any new commands once you have it setup</li> <li>Is a more consistent user experience when switching from static API keys</li> </ul> <p>Cons:</p> <ul> <li>Does not support printing URLs to the console for the user to paste into a browser</li> <li><code>aws-sso</code> must sometimes open a browser to execute a command which can be confusing</li> <li>Must remember the name of every named profile</li> </ul>"},{"location":"quickstart/#aws-console-access","title":"AWS Console Access","text":"<p>One of the major benefits of using AWS SSO is having consistent permissions in the AWS Console as well as via the CLI/API.  Unforunately, using the AWS Console with multiple accounts and roles can be frustrating because you can only be logged into a single role at any given time.</p> <p>AWS SSO CLI solves this problem when you use Firefox with Firefox Open URL in Container v1.0.3 plugin. This causes each role to have it's own isolated container so you can have multiple AWS Console sessions active at a time.</p> <p>Using Firefox containers requires a special configuration in your <code>~/.aws-sso/config.yaml</code> as described here.</p> <p>Regardless if you are using Firefox containers or not, using <code>aws-sso</code> to login is straight forward:</p> <ol> <li>If you have existing AWS API credentials loaded in your shell, typing         <code>aws-sso console</code> will generate a URL to log you into the same role.</li> <li>Choosing a role can be done via the same CLI options as <code>exec</code></li> <li>If no CLI options are provided AND you don't have AWS API credentials         loaded, the tags based search feature will start.</li> <li>If you have existing AWS API credentials in your shell and you want to login         to a different role via the tag based search feture, use the <code>-P</code> /         <code>--prompt</code> flag.</li> </ol> <p>Demo of how this works: </p>"},{"location":"release/","title":"Release instructions","text":"<ol> <li>Update the <code>CHANGELOG.md</code><ul> <li>Ensure the top level version is set and the date is correct</li> <li>At the bottom is the list of changes, add the new version</li> </ul> </li> <li>Update <code>Makefile</code><ul> <li>Update the <code>PROJECT_VERSION</code></li> </ul> </li> <li>Commit <code>CHANGELOG.md</code> and <code>Makefile</code> &amp; merge to <code>main</code></li> <li>Run <code>make release-tag</code> to create an annotated/signed tag</li> <li>Visit github.com and create the release.</li> <li>Wait for the github actions to create the binaries and attach them to the release</li> <li>Run <code>make release-brew</code> to create PR against Homebrew/core<ul> <li>Note, if this command does not work, it's most likely because your homebrew dev environment is not setup.  Follow  the instructions here.</li> </ul> </li> </ol>"},{"location":"remote-ssh/","title":"Using aws-sso on remote hosts with SSH","text":"<p>This is intended to show how to use your <code>aws-sso</code> credentials on a remote/bastion host, without requring you to install or configure <code>aws-sso</code> on that host, while maintaining security.  Additionally, when you have to authenticate via your SSO provider, that can easily invoke your local web browser without resorting to printing and clicking on URLs.</p>"},{"location":"remote-ssh/#overview","title":"Overview","text":"<p>Note: Before going any further, this document assumes you have already installed and configured aws-sso on your local system. If not, do that now. :)</p> <p>Accessing one or more AWS Identity Center based IAM Roles uses the ECS Server running locally and then using ssh to forward the port to the remote host. Security is provided via a bearer token you configure on each side and all traffic is encrypted over ssh.</p> <p>Warning: Running without SSL is not recommend as it may allow even a non-root user on the remote host to steal your AWS API credentials.</p>"},{"location":"remote-ssh/#on-your-local-system","title":"On your local system","text":"<ol> <li>Follow the directions to enable HTTP Authentication and Encryption.</li> <li>Start the ECS Server:<ol> <li>In a Docker container: <code>aws-sso ecs docker start</code></li> <li>Or you can use a screen or tmux session: <code>aws-sso ecs server</code></li> </ol> </li> <li>Load your selected IAM credentials into the ECS Server: <code>aws-sso ecs load --profile=&lt;profile name&gt;</code></li> <li>SSH to the remote system using the -R flag to forward tcp/4144:     <code>ssh -R 4144:localhost:4144 &lt;remotehost&gt;</code></li> </ol>"},{"location":"remote-ssh/#on-your-remote-system-once-you-have-logged-in-as-described-above","title":"On your remote system (once you have logged in as described above)","text":"<p>Note: The following commands assume you are using <code>bash</code>.  You may have to tweak for other shells.</p> <ol> <li>Tell the AWS SDK how to talk to the ECS Server over SSH: <code>export AWS_CONTAINER_CREDENTIALS_FULL_URI=https://localhost:4144/</code> (or <code>http</code> if you did not enable SSL)</li> <li>Tell the AWS SDK the bearer token secret from the first step on your local system: <code>export AWS_CONTAINER_AUTHORIZATION_TOKEN='Bearer &lt;secret&gt;'</code></li> <li>Verify everything works: <code>aws sts get-caller-identity</code></li> </ol> <p>See the ECS Server documentation for more information about the ECS server and how to use multiple IAM role credentials simultaneously.</p>"},{"location":"remote-ssh/#advanced-usage","title":"Advanced Usage","text":"<p>The above instructions grant any host you ssh to, access to the same AWS IAM Role.  But what if you want to access multiple roles?</p> <p>For each role you'd like to access you will need to do two things:</p> <ol> <li>On your local host, load that role into an individual slot in the ECS Server: <code>aws-sso ecs load --slotted --profile &lt;profile name&gt;</code></li> <li>On the remote host, specify the correct URL: <code>export AWS_CONTAINER_CREDENTIALS_FULL=https://localhost:4144/slot/&lt;profile name&gt;</code></li> </ol>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>The only version I support is the latest version of <code>aws-sso</code>.  Should a new major version be released which is incompatible with v2.x, then this policy will be updated at that time.</p> <p>Note: with the v2.x release, v1.x is no longer supported.</p>"},{"location":"security/#code-signing","title":"Code signing","text":"<p>All commits by me are signed by my commit signing GPG key.</p>"},{"location":"security/#binary-signatures","title":"Binary signatures","text":"<p>All releases have a corresponding detactched GPG signature using my code signing GPG key.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":""},{"location":"security/#reporting-a-vulnerability_1","title":"Reporting a Vulnerability","text":"<p>Please open a security ticket in GitHub. If you believe the public visibility of the information of the bug would place other <code>aws-sso</code> users at risk, then you may email me at: <code>synfinatic@gmail.com</code>.  GPG encrypting your email in those situations is encouraged and you should use this GPG Key.</p>"},{"location":"security/#security-model","title":"Security Model","text":"<p><code>aws-sso</code> relies on 99designs/keyring to store and retrieve secrets in 3rd party secure key stores which are available on macOS, Windows, and Linux.  The security of <code>aws-sso</code> is dependent on those systems.</p> <p>AWS Identity Center security tokens are never exposed, however by design the AWS IAM credentials are typically exposed via a variety of means in order for them to be used by other processes.  It is the user's responsibility to ensure that those credentials are handled appropriately based on their security threat model.</p>"},{"location":"security/#ecs-server-mode-concerns","title":"ECS Server Mode Concerns","text":"<p>By default, running in ECS Server Mode (<code>aws-sso ecs server</code>) an HTTP API will be started on a TCP port bound to localhost.  By default, loading and retrieving IAM Role credentials from this server will happen in the clear without any encryption or authentication  For this reason, it is not recommended to be used in this way on multi-tenant user systems or other untrusted environments.</p> <p>Running the ECS Server in docker (<code>aws-sso ecs docker start</code>) will briefly expose your HTTP Authentication bearer token and SSL private key in clear text in <code>~/.aws-sso/mnt/</code>.  If you are running it on a system where the <code>root</code> user is not trusted, this may not be acceptable.  In such cases, it is recommended to run <code>aws-sso ecs server</code> in a screen or tmux session.</p>"}]}